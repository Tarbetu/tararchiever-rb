{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6","program":"/home/emre/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","xz2","/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=cb7dc927347379a1","-C","extra-filename=-cb7dc927347379a1","--out-dir","/home/emre/Genel/tararchiever-git/target/rls/debug/deps","-L","dependency=/home/emre/Genel/tararchiever-git/target/rls/debug/deps","--extern","lzma_sys=/home/emre/Genel/tararchiever-git/target/rls/debug/deps/liblzma_sys-d951de803224f3e1.rmeta","--cap-lints","allow","-L","native=/home/emre/Genel/tararchiever-git/target/rls/debug/build/lzma-sys-c704e2c27f4d25a4/out","--error-format=json","--sysroot","/home/emre/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/emre/Genel/tararchiever-git/target/rls/debug/deps/libxz2-cb7dc927347379a1.rmeta"},"prelude":{"crate_id":{"name":"xz2","disambiguator":[10571257031633799418,13073420803188470556]},"crate_root":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src","external_crates":[{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[3329901521826220148,8779651902869174066]}},{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[11533795067257537051,6600409280955634707]}},{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[12614123221401343543,9564301585503608515]}},{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[1785005413158388284,2453622026203223019]}},{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12957079427417428001,17718260667887668647]}},{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[10214993728156300765,14618204673916620187]}},{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[12453517098623888364,4709794086161820998]}},{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12634510118091288440,7983944581587655387]}},{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[14017342134866723280,9256858969587329629]}},{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[7061025862014072460,14171357653989770935]}},{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[2285728033677722481,16182084057206383065]}},{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[7305883247437987566,266452839079745451]}},{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[13956229687295891598,15294992126055156716]}},{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[931598532372339641,10024719927090962737]}},{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[11150552510595322945,15608256962932530162]}},{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[4217706585212656622,592289864015908737]}},{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[2229008352226773351,3496425060661471051]}},{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","num":18,"id":{"name":"lzma_sys","disambiguator":[8432678459094874754,488528508113840838]}},{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","num":19,"id":{"name":"libc","disambiguator":[13724102224262606239,8428458070253568838]}}],"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":0,"byte_end":2078,"line_start":1,"line_end":65,"column_start":1,"column_end":15}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":0,"byte_end":2078,"line_start":1,"line_end":65,"column_start":1,"column_end":15},"name":"","qualname":"::","value":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":87},{"krate":0,"index":141},{"krate":0,"index":187}],"decl_id":null,"docs":" LZMA/XZ encoding and decoding streams","sig":null,"attributes":[{"value":"/ LZMA/XZ encoding and decoding streams","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":0,"byte_end":41,"line_start":1,"line_end":1,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":42,"byte_end":45,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This library is a binding to liblzma currently to provide LZMA and xz","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":46,"byte_end":119,"line_start":3,"line_end":3,"column_start":1,"column_end":74}},{"value":"/ encoding/decoding streams. I/O streams are provided in the `read`, `write`,","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":120,"byte_end":199,"line_start":4,"line_end":4,"column_start":1,"column_end":80}},{"value":"/ and `bufread` modules (same types, different bounds). Raw in-memory","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":200,"byte_end":271,"line_start":5,"line_end":5,"column_start":1,"column_end":72}},{"value":"/ compression/decompression is provided via the `stream` module and contains","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":272,"byte_end":350,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/ many of the raw APIs in liblzma.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":351,"byte_end":387,"line_start":7,"line_end":7,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":388,"byte_end":391,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":392,"byte_end":406,"line_start":9,"line_end":9,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":407,"byte_end":410,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":411,"byte_end":418,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":419,"byte_end":447,"line_start":12,"line_end":12,"column_start":1,"column_end":29}},{"value":"/ use xz2::read::{XzEncoder, XzDecoder};","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":448,"byte_end":490,"line_start":13,"line_end":13,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":491,"byte_end":494,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ // Round trip some bytes from a byte source, into a compressor, into a","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":495,"byte_end":569,"line_start":15,"line_end":15,"column_start":1,"column_end":75}},{"value":"/ // decompressor, and finally into a vector.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":570,"byte_end":617,"line_start":16,"line_end":16,"column_start":1,"column_end":48}},{"value":"/ let data = \"Hello, World!\".as_bytes();","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":618,"byte_end":660,"line_start":17,"line_end":17,"column_start":1,"column_end":43}},{"value":"/ let compressor = XzEncoder::new(data, 9);","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":661,"byte_end":706,"line_start":18,"line_end":18,"column_start":1,"column_end":46}},{"value":"/ let mut decompressor = XzDecoder::new(compressor);","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":707,"byte_end":761,"line_start":19,"line_end":19,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":762,"byte_end":765,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ let mut contents = String::new();","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":766,"byte_end":803,"line_start":21,"line_end":21,"column_start":1,"column_end":38}},{"value":"/ decompressor.read_to_string(&mut contents).unwrap();","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":804,"byte_end":860,"line_start":22,"line_end":22,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(contents, \"Hello, World!\");","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":861,"byte_end":903,"line_start":23,"line_end":23,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":904,"byte_end":911,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":912,"byte_end":915,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ # Async I/O","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":916,"byte_end":931,"line_start":26,"line_end":26,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":932,"byte_end":935,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ This crate optionally can support async I/O streams with the Tokio stack via","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":936,"byte_end":1016,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/ the `tokio` feature of this crate:","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":1017,"byte_end":1055,"line_start":29,"line_end":29,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":1056,"byte_end":1059,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":1060,"byte_end":1071,"line_start":31,"line_end":31,"column_start":1,"column_end":12}},{"value":"/ xz2 = { version = \"0.3\", features = [\"tokio\"] }","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":1072,"byte_end":1123,"line_start":32,"line_end":32,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":1124,"byte_end":1131,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":1132,"byte_end":1135,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ All methods are internally capable of working with streams that may return","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":1136,"byte_end":1214,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ `ErrorKind::WouldBlock` when they're not ready to perform the particular","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":1215,"byte_end":1291,"line_start":36,"line_end":36,"column_start":1,"column_end":77}},{"value":"/ operation.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":1292,"byte_end":1306,"line_start":37,"line_end":37,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":1307,"byte_end":1310,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Note that care needs to be taken when using these objects, however. The","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":1311,"byte_end":1386,"line_start":39,"line_end":39,"column_start":1,"column_end":76}},{"value":"/ Tokio runtime, in particular, requires that data is fully flushed before","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":1387,"byte_end":1463,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/ dropping streams. For compatibility with blocking streams all streams are","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":1464,"byte_end":1541,"line_start":41,"line_end":41,"column_start":1,"column_end":78}},{"value":"/ flushed/written when they are dropped, and this is not always a suitable","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":1542,"byte_end":1618,"line_start":42,"line_end":42,"column_start":1,"column_end":77}},{"value":"/ time to perform I/O. If I/O streams are flushed before drop, however, then","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":1619,"byte_end":1697,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ these operations will be a noop.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":1698,"byte_end":1734,"line_start":44,"line_end":44,"column_start":1,"column_end":37}},{"value":"deny(missing_docs)","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":1736,"byte_end":1758,"line_start":46,"line_end":46,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stream","qualname":"::stream","value":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":249},{"krate":0,"index":267},{"krate":0,"index":265},{"krate":0,"index":268},{"krate":0,"index":283},{"krate":0,"index":282},{"krate":0,"index":280},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":285},{"krate":0,"index":307},{"krate":0,"index":305},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":309},{"krate":0,"index":324},{"krate":0,"index":322},{"krate":0,"index":325},{"krate":0,"index":334},{"krate":0,"index":332},{"krate":0,"index":335},{"krate":0,"index":353},{"krate":0,"index":351},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":43},{"krate":0,"index":53},{"krate":0,"index":55},{"krate":0,"index":57},{"krate":0,"index":68},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":81},{"krate":0,"index":83},{"krate":0,"index":85}],"decl_id":null,"docs":" Raw in-memory LZMA streams.","sig":null,"attributes":[{"value":"/ Raw in-memory LZMA streams.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":2080,"byte_end":2111,"line_start":1,"line_end":1,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":2112,"byte_end":2115,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The `Stream` type exported by this module is the primary type which performs","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":2116,"byte_end":2196,"line_start":3,"line_end":3,"column_start":1,"column_end":81}},{"value":"/ encoding/decoding of LZMA streams. Each `Stream` is either an encoder or","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":2197,"byte_end":2273,"line_start":4,"line_end":4,"column_start":1,"column_end":77}},{"value":"/ decoder and processes data in a streaming fashion.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":2274,"byte_end":2328,"line_start":5,"line_end":5,"column_start":1,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":12},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":2694,"byte_end":2700,"line_start":20,"line_end":20,"column_start":12,"column_end":18},"name":"Stream","qualname":"::stream::Stream","value":"Stream {  }","parent":null,"children":[{"krate":0,"index":13}],"decl_id":null,"docs":" Representation of an in-memory LZMA encoding or decoding stream.","sig":null,"attributes":[{"value":"/ Representation of an in-memory LZMA encoding or decoding stream.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":2453,"byte_end":2521,"line_start":16,"line_end":16,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":2522,"byte_end":2525,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Wraps the raw underlying `lzma_stream` type and provides the ability to","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":2526,"byte_end":2601,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/ create streams which can either decode or encode various LZMA-based formats.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":2602,"byte_end":2682,"line_start":19,"line_end":19,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":16},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":2944,"byte_end":2955,"line_start":30,"line_end":30,"column_start":12,"column_end":23},"name":"LzmaOptions","qualname":"::stream::LzmaOptions","value":"LzmaOptions {  }","parent":null,"children":[{"krate":0,"index":17}],"decl_id":null,"docs":" Options that can be used to configure how LZMA encoding happens.","sig":null,"attributes":[{"value":"/ Options that can be used to configure how LZMA encoding happens.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":2801,"byte_end":2869,"line_start":27,"line_end":27,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":2870,"byte_end":2873,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ This builder is consumed by a number of other methods.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":2874,"byte_end":2932,"line_start":29,"line_end":29,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":18},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":3065,"byte_end":3080,"line_start":35,"line_end":35,"column_start":12,"column_end":27},"name":"MtStreamBuilder","qualname":"::stream::MtStreamBuilder","value":"MtStreamBuilder {  }","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":20}],"decl_id":null,"docs":" Builder to create a multi-threaded stream encoder.\n","sig":null,"attributes":[{"value":"/ Builder to create a multi-threaded stream encoder.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":2999,"byte_end":3053,"line_start":34,"line_end":34,"column_start":1,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":21},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":3218,"byte_end":3225,"line_start":41,"line_end":41,"column_start":12,"column_end":19},"name":"Filters","qualname":"::stream::Filters","value":"Filters {  }","parent":null,"children":[{"krate":0,"index":22},{"krate":0,"index":23}],"decl_id":null,"docs":" A custom chain of filters to configure an encoding stream.\n","sig":null,"attributes":[{"value":"/ A custom chain of filters to configure an encoding stream.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":3144,"byte_end":3206,"line_start":40,"line_end":40,"column_start":1,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":250},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":4205,"byte_end":4208,"line_start":64,"line_end":64,"column_start":5,"column_end":8},"name":"Run","qualname":"::stream::Action::Run","value":"Action::Run","parent":{"krate":0,"index":249},"children":[],"decl_id":null,"docs":" Continue processing","sig":null,"attributes":[{"value":"/ Continue processing","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":3789,"byte_end":3812,"line_start":55,"line_end":55,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":3814,"byte_end":3817,"line_start":56,"line_end":56,"column_start":2,"column_end":5}},{"value":"/ When encoding, encode as much input as possible. Some internal buffering","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":3822,"byte_end":3898,"line_start":57,"line_end":57,"column_start":5,"column_end":81}},{"value":"/ will probably be done (depends on the filter chain in use), which causes","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":3903,"byte_end":3979,"line_start":58,"line_end":58,"column_start":5,"column_end":81}},{"value":"/ latency: the input used won't usually be decodeable from the output of","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":3984,"byte_end":4058,"line_start":59,"line_end":59,"column_start":5,"column_end":79}},{"value":"/ the same `process` call.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":4063,"byte_end":4091,"line_start":60,"line_end":60,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":4093,"byte_end":4096,"line_start":61,"line_end":61,"column_start":2,"column_end":5}},{"value":"/ When decoding, decode as much input as possible and produce as much","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":4101,"byte_end":4172,"line_start":62,"line_end":62,"column_start":5,"column_end":76}},{"value":"/ output as possible.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":4177,"byte_end":4200,"line_start":63,"line_end":63,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":253},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":5168,"byte_end":5177,"line_start":84,"line_end":84,"column_start":5,"column_end":14},"name":"SyncFlush","qualname":"::stream::Action::SyncFlush","value":"Action::SyncFlush","parent":{"krate":0,"index":249},"children":[],"decl_id":null,"docs":" Make all the input available at output","sig":null,"attributes":[{"value":"/ Make all the input available at output","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":4245,"byte_end":4287,"line_start":66,"line_end":66,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":4292,"byte_end":4295,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ Normally the encoder introduces some latency. `SyncFlush` forces all the","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":4300,"byte_end":4376,"line_start":68,"line_end":68,"column_start":5,"column_end":81}},{"value":"/ buffered data to be available at output without resetting the internal","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":4381,"byte_end":4455,"line_start":69,"line_end":69,"column_start":5,"column_end":79}},{"value":"/ state of the encoder. This way it is possible to use compressed stream","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":4460,"byte_end":4534,"line_start":70,"line_end":70,"column_start":5,"column_end":79}},{"value":"/ for example for communication over network.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":4539,"byte_end":4586,"line_start":71,"line_end":71,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":4591,"byte_end":4594,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ Only some filters support `SyncFlush`. Trying to use `SyncFlush` with","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":4599,"byte_end":4672,"line_start":73,"line_end":73,"column_start":5,"column_end":78}},{"value":"/ filters that don't support it will make `process` return","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":4677,"byte_end":4737,"line_start":74,"line_end":74,"column_start":5,"column_end":65}},{"value":"/ `Error::Options`. For example, LZMA1 doesn't support `SyncFlush` but","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":4742,"byte_end":4814,"line_start":75,"line_end":75,"column_start":5,"column_end":77}},{"value":"/ LZMA2 does.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":4819,"byte_end":4834,"line_start":76,"line_end":76,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":4839,"byte_end":4842,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ Using `SyncFlush` very often can dramatically reduce the compression","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":4847,"byte_end":4919,"line_start":78,"line_end":78,"column_start":5,"column_end":77}},{"value":"/ ratio. With some filters (for example, LZMA2), fine-tuning the","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":4924,"byte_end":4990,"line_start":79,"line_end":79,"column_start":5,"column_end":71}},{"value":"/ compression options may help mitigate this problem significantly (for","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":4995,"byte_end":5068,"line_start":80,"line_end":80,"column_start":5,"column_end":78}},{"value":"/ example, match finder with LZMA2).","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":5073,"byte_end":5111,"line_start":81,"line_end":81,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":5116,"byte_end":5119,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ Decoders don't support `SyncFlush`.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":5124,"byte_end":5163,"line_start":83,"line_end":83,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":256},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":5726,"byte_end":5735,"line_start":96,"line_end":96,"column_start":5,"column_end":14},"name":"FullFlush","qualname":"::stream::Action::FullFlush","value":"Action::FullFlush","parent":{"krate":0,"index":249},"children":[],"decl_id":null,"docs":" Finish encoding of the current block.","sig":null,"attributes":[{"value":"/ Finish encoding of the current block.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":5221,"byte_end":5262,"line_start":86,"line_end":86,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":5267,"byte_end":5270,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ All the input data going to the current block must have been given to","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":5275,"byte_end":5348,"line_start":88,"line_end":88,"column_start":5,"column_end":78}},{"value":"/ the encoder. Call `process` with `FullFlush` until it returns","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":5353,"byte_end":5418,"line_start":89,"line_end":89,"column_start":5,"column_end":70}},{"value":"/ `Status::StreamEnd`. Then continue normally with `Run` or finish the","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":5423,"byte_end":5495,"line_start":90,"line_end":90,"column_start":5,"column_end":77}},{"value":"/ Stream with `Finish`.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":5500,"byte_end":5525,"line_start":91,"line_end":91,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":5530,"byte_end":5533,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ This action is currently supported only by stream encoder and easy","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":5538,"byte_end":5608,"line_start":93,"line_end":93,"column_start":5,"column_end":75}},{"value":"/ encoder (which uses stream encoder). If there is no unfinished block, no","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":5613,"byte_end":5689,"line_start":94,"line_end":94,"column_start":5,"column_end":81}},{"value":"/ empty block is created.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":5694,"byte_end":5721,"line_start":95,"line_end":95,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":259},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":6670,"byte_end":6681,"line_start":114,"line_end":114,"column_start":5,"column_end":16},"name":"FullBarrier","qualname":"::stream::Action::FullBarrier","value":"Action::FullBarrier","parent":{"krate":0,"index":249},"children":[],"decl_id":null,"docs":" Finish encoding of the current block.","sig":null,"attributes":[{"value":"/ Finish encoding of the current block.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":5779,"byte_end":5820,"line_start":98,"line_end":98,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":5825,"byte_end":5828,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ This is like `FullFlush` except that this doesn't necessarily wait until","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":5833,"byte_end":5909,"line_start":100,"line_end":100,"column_start":5,"column_end":81}},{"value":"/ all the input has been made available via the output buffer. That is,","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":5914,"byte_end":5987,"line_start":101,"line_end":101,"column_start":5,"column_end":78}},{"value":"/ `process` might return `Status::StreamEnd` as soon as all the input has","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":5992,"byte_end":6067,"line_start":102,"line_end":102,"column_start":5,"column_end":80}},{"value":"/ been consumed.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":6072,"byte_end":6090,"line_start":103,"line_end":103,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":6095,"byte_end":6098,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ `FullBarrier` is useful with a threaded encoder if one wants to split","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":6103,"byte_end":6176,"line_start":105,"line_end":105,"column_start":5,"column_end":78}},{"value":"/ the .xz Stream into blocks at specific offsets but doesn't care if the","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":6181,"byte_end":6255,"line_start":106,"line_end":106,"column_start":5,"column_end":79}},{"value":"/ output isn't flushed immediately. Using `FullBarrier` allows keeping the","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":6260,"byte_end":6336,"line_start":107,"line_end":107,"column_start":5,"column_end":81}},{"value":"/ threads busy while `FullFlush` would make `process` wait until all the","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":6341,"byte_end":6415,"line_start":108,"line_end":108,"column_start":5,"column_end":79}},{"value":"/ threads have finished until more data could be passed to the encoder.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":6420,"byte_end":6493,"line_start":109,"line_end":109,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":6498,"byte_end":6501,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ With a `Stream` initialized with the single-threaded","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":6506,"byte_end":6562,"line_start":111,"line_end":111,"column_start":5,"column_end":61}},{"value":"/ `new_stream_encoder` or `new_easy_encoder`, `FullBarrier` is an alias","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":6567,"byte_end":6640,"line_start":112,"line_end":112,"column_start":5,"column_end":78}},{"value":"/ for `FullFlush`.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":6645,"byte_end":6665,"line_start":113,"line_end":113,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":262},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":7359,"byte_end":7365,"line_start":127,"line_end":127,"column_start":5,"column_end":11},"name":"Finish","qualname":"::stream::Action::Finish","value":"Action::Finish","parent":{"krate":0,"index":249},"children":[],"decl_id":null,"docs":" Finish the current operation","sig":null,"attributes":[{"value":"/ Finish the current operation","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":6727,"byte_end":6759,"line_start":116,"line_end":116,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":6764,"byte_end":6767,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ All the input data must have been given to the encoder (the last bytes","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":6772,"byte_end":6846,"line_start":118,"line_end":118,"column_start":5,"column_end":79}},{"value":"/ can still be pending in next_in). Call `process` with `Finish` until it","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":6851,"byte_end":6926,"line_start":119,"line_end":119,"column_start":5,"column_end":80}},{"value":"/ returns `Status::StreamEnd`. Once `Finish` has been used, the amount of","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":6931,"byte_end":7006,"line_start":120,"line_end":120,"column_start":5,"column_end":80}},{"value":"/ input must no longer be changed by the application.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":7011,"byte_end":7066,"line_start":121,"line_end":121,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":7071,"byte_end":7074,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ When decoding, using `Finish` is optional unless the concatenated flag","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":7079,"byte_end":7153,"line_start":123,"line_end":123,"column_start":5,"column_end":79}},{"value":"/ was used when the decoder was initialized. When concatenated was not","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":7158,"byte_end":7230,"line_start":124,"line_end":124,"column_start":5,"column_end":77}},{"value":"/ used, the only effect of `Finish` is that the amount of input must not","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":7235,"byte_end":7309,"line_start":125,"line_end":125,"column_start":5,"column_end":79}},{"value":"/ be changed just like in the encoder.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":7314,"byte_end":7354,"line_start":126,"line_end":126,"column_start":5,"column_end":45}}]},{"kind":"Enum","id":{"krate":0,"index":249},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":3779,"byte_end":3785,"line_start":54,"line_end":54,"column_start":10,"column_end":16},"name":"Action","qualname":"::stream::Action","value":"pub enum Action {\n\n    /// Continue processing\n    ///\n    /// When encoding, encode as much input as possible. Some internal buffering\n    /// will probably be done (depends on the filter chain in use), which causes\n    /// latency: the input used won't usually be decodeable from the output of\n    /// the same `process` call.\n    ///\n    /// When decoding, decode as much input as possible and produce as much\n    /// output as possible.\n    Run = ,\n\n    /// Make all the input available at output\n    ///\n    /// Normally the encoder introduces some latency. `SyncFlush` forces all the\n    /// buffered data to be available at output without resetting the internal\n    /// state of the encoder. This way it is possible to use compressed stream\n    /// for example for communication over network.\n    ///\n    /// Only some filters support `SyncFlush`. Trying to use `SyncFlush` with\n    /// filters that don't support it will make `process` return\n    /// `Error::Options`. For example, LZMA1 doesn't support `SyncFlush` but\n    /// LZMA2 does.\n    ///\n    /// Using `SyncFlush` very often can dramatically reduce the compression\n    /// ratio. With some filters (for example, LZMA2), fine-tuning the\n    /// compression options may help mitigate this problem significantly (for\n    /// example, match finder with LZMA2).\n    ///\n    /// Decoders don't support `SyncFlush`.\n    SyncFlush = ,\n\n    /// Finish encoding of the current block.\n    ///\n    /// All the input data going to the current block must have been given to\n    /// the encoder. Call `process` with `FullFlush` until it returns\n    /// `Status::StreamEnd`. Then continue normally with `Run` or finish the\n    /// Stream with `Finish`.\n    ///\n    /// This action is currently supported only by stream encoder and easy\n    /// encoder (which uses stream encoder). If there is no unfinished block, no\n    /// empty block is created.\n    FullFlush = ,\n\n    /// Finish encoding of the current block.\n    ///\n    /// This is like `FullFlush` except that this doesn't necessarily wait until\n    /// all the input has been made available via the output buffer. That is,\n    /// `process` might return `Status::StreamEnd` as soon as all the input has\n    /// been consumed.\n    ///\n    /// `FullBarrier` is useful with a threaded encoder if one wants to split\n    /// the .xz Stream into blocks at specific offsets but doesn't care if the\n    /// output isn't flushed immediately. Using `FullBarrier` allows keeping the\n    /// threads busy while `FullFlush` would make `process` wait until all the\n    /// threads have finished until more data could be passed to the encoder.\n    ///\n    /// With a `Stream` initialized with the single-threaded\n    /// `new_stream_encoder` or `new_easy_encoder`, `FullBarrier` is an alias\n    /// for `FullFlush`.\n    FullBarrier = ,\n\n    /// Finish the current operation\n    ///\n    /// All the input data must have been given to the encoder (the last bytes\n    /// can still be pending in next_in). Call `process` with `Finish` until it\n    /// returns `Status::StreamEnd`. Once `Finish` has been used, the amount of\n    /// input must no longer be changed by the application.\n    ///\n    /// When decoding, using `Finish` is optional unless the concatenated flag\n    /// was used when the decoder was initialized. When concatenated was not\n    /// used, the only effect of `Finish` is that the amount of input must not\n    /// be changed just like in the encoder.\n    Finish = ,\n}","parent":null,"children":[{"krate":0,"index":250},{"krate":0,"index":253},{"krate":0,"index":256},{"krate":0,"index":259},{"krate":0,"index":262}],"decl_id":null,"docs":" The `action` argument for `process`,","sig":null,"attributes":[{"value":"/ The `action` argument for `process`,","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":3326,"byte_end":3366,"line_start":46,"line_end":46,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":3367,"byte_end":3370,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ After the first use of SyncFlush, FullFlush, FullBarrier, or Finish, the","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":3371,"byte_end":3447,"line_start":48,"line_end":48,"column_start":1,"column_end":77}},{"value":"/ same `action' must is used until `process` returns `Status::StreamEnd`.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":3448,"byte_end":3523,"line_start":49,"line_end":49,"column_start":1,"column_end":76}},{"value":"/ Also, the amount of input must not be modified by the application until","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":3524,"byte_end":3599,"line_start":50,"line_end":50,"column_start":1,"column_end":76}},{"value":"/ `process` returns `Status::StreamEnd`. Changing the `action' or modifying","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":3600,"byte_end":3677,"line_start":51,"line_end":51,"column_start":1,"column_end":78}},{"value":"/ the amount of input will make `process` return `Error::Program`.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":3678,"byte_end":3746,"line_start":52,"line_end":52,"column_start":1,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":269},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":7551,"byte_end":7553,"line_start":134,"line_end":134,"column_start":5,"column_end":7},"name":"Ok","qualname":"::stream::Status::Ok","value":"Status::Ok","parent":{"krate":0,"index":268},"children":[],"decl_id":null,"docs":" Operation completed successfully.\n","sig":null,"attributes":[{"value":"/ Operation completed successfully.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":7509,"byte_end":7546,"line_start":133,"line_end":133,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":271},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":7773,"byte_end":7782,"line_start":141,"line_end":141,"column_start":5,"column_end":14},"name":"StreamEnd","qualname":"::stream::Status::StreamEnd","value":"Status::StreamEnd","parent":{"krate":0,"index":268},"children":[],"decl_id":null,"docs":" End of stream was reached.","sig":null,"attributes":[{"value":"/ End of stream was reached.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":7560,"byte_end":7590,"line_start":136,"line_end":136,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":7595,"byte_end":7598,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ When encoding, this means that a sync/full flush or `Finish` was","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":7603,"byte_end":7671,"line_start":138,"line_end":138,"column_start":5,"column_end":73}},{"value":"/ completed. When decoding, this indicates that all data was decoded","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":7676,"byte_end":7746,"line_start":139,"line_end":139,"column_start":5,"column_end":75}},{"value":"/ successfully.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":7751,"byte_end":7768,"line_start":140,"line_end":140,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":273},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":7978,"byte_end":7986,"line_start":146,"line_end":146,"column_start":5,"column_end":13},"name":"GetCheck","qualname":"::stream::Status::GetCheck","value":"Status::GetCheck","parent":{"krate":0,"index":268},"children":[],"decl_id":null,"docs":" If the TELL_ANY_CHECK flags is specified when constructing a decoder,\n this informs that the `check` method will now return the underlying\n integrity check algorithm.\n","sig":null,"attributes":[{"value":"/ If the TELL_ANY_CHECK flags is specified when constructing a decoder,","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":7789,"byte_end":7862,"line_start":143,"line_end":143,"column_start":5,"column_end":78}},{"value":"/ this informs that the `check` method will now return the underlying","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":7867,"byte_end":7938,"line_start":144,"line_end":144,"column_start":5,"column_end":76}},{"value":"/ integrity check algorithm.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":7943,"byte_end":7973,"line_start":145,"line_end":145,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":275},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":8396,"byte_end":8405,"line_start":156,"line_end":156,"column_start":5,"column_end":14},"name":"MemNeeded","qualname":"::stream::Status::MemNeeded","value":"Status::MemNeeded","parent":{"krate":0,"index":268},"children":[],"decl_id":null,"docs":" An error has not been encountered, but no progress is possible.","sig":null,"attributes":[{"value":"/ An error has not been encountered, but no progress is possible.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":7993,"byte_end":8060,"line_start":148,"line_end":148,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":8065,"byte_end":8068,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ Processing can be continued normally by providing more input and/or more","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":8073,"byte_end":8149,"line_start":150,"line_end":150,"column_start":5,"column_end":81}},{"value":"/ output space, if possible.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":8154,"byte_end":8184,"line_start":151,"line_end":151,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":8189,"byte_end":8192,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ Typically the first call to `process` that can do no progress returns","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":8197,"byte_end":8270,"line_start":153,"line_end":153,"column_start":5,"column_end":78}},{"value":"/ `Ok` instead of `MemNeeded`. Only the second consecutive call doing no","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":8275,"byte_end":8349,"line_start":154,"line_end":154,"column_start":5,"column_end":79}},{"value":"/ progress will return `MemNeeded`.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":8354,"byte_end":8391,"line_start":155,"line_end":155,"column_start":5,"column_end":42}}]},{"kind":"Enum","id":{"krate":0,"index":268},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":7496,"byte_end":7502,"line_start":132,"line_end":132,"column_start":10,"column_end":16},"name":"Status","qualname":"::stream::Status","value":"pub enum Status {\n\n    /// Operation completed successfully.\n    Ok,\n\n    /// End of stream was reached.\n    ///\n    /// When encoding, this means that a sync/full flush or `Finish` was\n    /// completed. When decoding, this indicates that all data was decoded\n    /// successfully.\n    StreamEnd,\n\n    /// If the TELL_ANY_CHECK flags is specified when constructing a decoder,\n    /// this informs that the `check` method will now return the underlying\n    /// integrity check algorithm.\n    GetCheck,\n\n    /// An error has not been encountered, but no progress is possible.\n    ///\n    /// Processing can be continued normally by providing more input and/or more\n    /// output space, if possible.\n    ///\n    /// Typically the first call to `process` that can do no progress returns\n    /// `Ok` instead of `MemNeeded`. Only the second consecutive call doing no\n    /// progress will return `MemNeeded`.\n    MemNeeded,\n}","parent":null,"children":[{"krate":0,"index":269},{"krate":0,"index":271},{"krate":0,"index":273},{"krate":0,"index":275}],"decl_id":null,"docs":" Return value of a `process` operation.\n","sig":null,"attributes":[{"value":"/ Return value of a `process` operation.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":7403,"byte_end":7445,"line_start":130,"line_end":130,"column_start":1,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":286},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":8582,"byte_end":8586,"line_start":163,"line_end":163,"column_start":5,"column_end":9},"name":"Data","qualname":"::stream::Error::Data","value":"Error::Data","parent":{"krate":0,"index":285},"children":[],"decl_id":null,"docs":" The underlying data was corrupt.\n","sig":null,"attributes":[{"value":"/ The underlying data was corrupt.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":8541,"byte_end":8577,"line_start":162,"line_end":162,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":288},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":8648,"byte_end":8655,"line_start":166,"line_end":166,"column_start":5,"column_end":12},"name":"Options","qualname":"::stream::Error::Options","value":"Error::Options","parent":{"krate":0,"index":285},"children":[],"decl_id":null,"docs":" Invalid or unsupported options were specified.\n","sig":null,"attributes":[{"value":"/ Invalid or unsupported options were specified.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":8593,"byte_end":8643,"line_start":165,"line_end":165,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":290},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":8701,"byte_end":8707,"line_start":169,"line_end":169,"column_start":5,"column_end":11},"name":"Format","qualname":"::stream::Error::Format","value":"Error::Format","parent":{"krate":0,"index":285},"children":[],"decl_id":null,"docs":" File format wasn't recognized.\n","sig":null,"attributes":[{"value":"/ File format wasn't recognized.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":8662,"byte_end":8696,"line_start":168,"line_end":168,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":292},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":8824,"byte_end":8832,"line_start":174,"line_end":174,"column_start":5,"column_end":13},"name":"MemLimit","qualname":"::stream::Error::MemLimit","value":"Error::MemLimit","parent":{"krate":0,"index":285},"children":[],"decl_id":null,"docs":" Memory usage limit was reached.","sig":null,"attributes":[{"value":"/ Memory usage limit was reached.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":8714,"byte_end":8749,"line_start":171,"line_end":171,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":8754,"byte_end":8757,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ The memory limit can be increased with `set_memlimit`","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":8762,"byte_end":8819,"line_start":173,"line_end":173,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":294},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":8877,"byte_end":8880,"line_start":177,"line_end":177,"column_start":5,"column_end":8},"name":"Mem","qualname":"::stream::Error::Mem","value":"Error::Mem","parent":{"krate":0,"index":285},"children":[],"decl_id":null,"docs":" Memory couldn't be allocated.\n","sig":null,"attributes":[{"value":"/ Memory couldn't be allocated.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":8839,"byte_end":8872,"line_start":176,"line_end":176,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":296},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":8932,"byte_end":8939,"line_start":180,"line_end":180,"column_start":5,"column_end":12},"name":"Program","qualname":"::stream::Error::Program","value":"Error::Program","parent":{"krate":0,"index":285},"children":[],"decl_id":null,"docs":" A programming error was encountered.\n","sig":null,"attributes":[{"value":"/ A programming error was encountered.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":8887,"byte_end":8927,"line_start":179,"line_end":179,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":298},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":9055,"byte_end":9062,"line_start":184,"line_end":184,"column_start":5,"column_end":12},"name":"NoCheck","qualname":"::stream::Error::NoCheck","value":"Error::NoCheck","parent":{"krate":0,"index":285},"children":[],"decl_id":null,"docs":" The `TELL_NO_CHECK` flag was specified and no integrity check was\n available for this stream.\n","sig":null,"attributes":[{"value":"/ The `TELL_NO_CHECK` flag was specified and no integrity check was","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":8946,"byte_end":9015,"line_start":182,"line_end":182,"column_start":5,"column_end":74}},{"value":"/ available for this stream.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":9020,"byte_end":9050,"line_start":183,"line_end":183,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":300},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":9216,"byte_end":9232,"line_start":188,"line_end":188,"column_start":5,"column_end":21},"name":"UnsupportedCheck","qualname":"::stream::Error::UnsupportedCheck","value":"Error::UnsupportedCheck","parent":{"krate":0,"index":285},"children":[],"decl_id":null,"docs":" The `TELL_UNSUPPORTED_CHECK` flag was specified and no integrity check\n isn't implemented in this build of liblzma for this stream.\n","sig":null,"attributes":[{"value":"/ The `TELL_UNSUPPORTED_CHECK` flag was specified and no integrity check","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":9069,"byte_end":9143,"line_start":186,"line_end":186,"column_start":5,"column_end":79}},{"value":"/ isn't implemented in this build of liblzma for this stream.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":9148,"byte_end":9211,"line_start":187,"line_end":187,"column_start":5,"column_end":68}}]},{"kind":"Enum","id":{"krate":0,"index":285},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":8529,"byte_end":8534,"line_start":161,"line_end":161,"column_start":10,"column_end":15},"name":"Error","qualname":"::stream::Error","value":"pub enum Error {\n\n    /// The underlying data was corrupt.\n    Data,\n\n    /// Invalid or unsupported options were specified.\n    Options,\n\n    /// File format wasn't recognized.\n    Format,\n\n    /// Memory usage limit was reached.\n    ///\n    /// The memory limit can be increased with `set_memlimit`\n    MemLimit,\n\n    /// Memory couldn't be allocated.\n    Mem,\n\n    /// A programming error was encountered.\n    Program,\n\n    /// The `TELL_NO_CHECK` flag was specified and no integrity check was\n    /// available for this stream.\n    NoCheck,\n\n    /// The `TELL_UNSUPPORTED_CHECK` flag was specified and no integrity check\n    /// isn't implemented in this build of liblzma for this stream.\n    UnsupportedCheck,\n}","parent":null,"children":[{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":290},{"krate":0,"index":292},{"krate":0,"index":294},{"krate":0,"index":296},{"krate":0,"index":298},{"krate":0,"index":300}],"decl_id":null,"docs":" Possible error codes that can be returned from a processing operation.\n","sig":null,"attributes":[{"value":"/ Possible error codes that can be returned from a processing operation.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":8410,"byte_end":8484,"line_start":159,"line_end":159,"column_start":1,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":310},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":9395,"byte_end":9399,"line_start":195,"line_end":195,"column_start":5,"column_end":9},"name":"None","qualname":"::stream::Check::None","value":"Check::None","parent":{"krate":0,"index":309},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":313},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":9442,"byte_end":9447,"line_start":196,"line_end":196,"column_start":5,"column_end":10},"name":"Crc32","qualname":"::stream::Check::Crc32","value":"Check::Crc32","parent":{"krate":0,"index":309},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":316},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":9491,"byte_end":9496,"line_start":197,"line_end":197,"column_start":5,"column_end":10},"name":"Crc64","qualname":"::stream::Check::Crc64","value":"Check::Crc64","parent":{"krate":0,"index":309},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":319},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":9540,"byte_end":9546,"line_start":198,"line_end":198,"column_start":5,"column_end":11},"name":"Sha256","qualname":"::stream::Check::Sha256","value":"Check::Sha256","parent":{"krate":0,"index":309},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":309},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":9383,"byte_end":9388,"line_start":194,"line_end":194,"column_start":10,"column_end":15},"name":"Check","qualname":"::stream::Check","value":"pub enum Check { None = , Crc32 = , Crc64 = , Sha256 = , }","parent":null,"children":[{"krate":0,"index":310},{"krate":0,"index":313},{"krate":0,"index":316},{"krate":0,"index":319}],"decl_id":null,"docs":" Possible integrity checks that can be part of a .xz stream.\n","sig":null,"attributes":[{"value":"/ Possible integrity checks that can be part of a .xz stream.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":9237,"byte_end":9300,"line_start":191,"line_end":191,"column_start":1,"column_end":64}},{"value":"allow(missing_docs)","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":9301,"byte_end":9323,"line_start":192,"line_end":192,"column_start":1,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":326},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":9877,"byte_end":9881,"line_start":211,"line_end":211,"column_start":5,"column_end":9},"name":"Fast","qualname":"::stream::Mode::Fast","value":"Mode::Fast","parent":{"krate":0,"index":325},"children":[],"decl_id":null,"docs":" Fast compression.","sig":null,"attributes":[{"value":"/ Fast compression.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":9748,"byte_end":9769,"line_start":207,"line_end":207,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":9774,"byte_end":9777,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ Fast mode is usually at its best when combined with a hash chain match","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":9782,"byte_end":9856,"line_start":209,"line_end":209,"column_start":5,"column_end":79}},{"value":"/ finder.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":9861,"byte_end":9872,"line_start":210,"line_end":210,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":329},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":10140,"byte_end":10146,"line_start":218,"line_end":218,"column_start":5,"column_end":11},"name":"Normal","qualname":"::stream::Mode::Normal","value":"Mode::Normal","parent":{"krate":0,"index":325},"children":[],"decl_id":null,"docs":" Normal compression.","sig":null,"attributes":[{"value":"/ Normal compression.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":9924,"byte_end":9947,"line_start":213,"line_end":213,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":9952,"byte_end":9955,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ This is usually notably slower than fast mode. Use this together with","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":9960,"byte_end":10033,"line_start":215,"line_end":215,"column_start":5,"column_end":78}},{"value":"/ binary tree match finders to expose the full potential of the LZMA1 or","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":10038,"byte_end":10112,"line_start":216,"line_end":216,"column_start":5,"column_end":79}},{"value":"/ LZMA2 encoder.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":10117,"byte_end":10135,"line_start":217,"line_end":217,"column_start":5,"column_end":23}}]},{"kind":"Enum","id":{"krate":0,"index":325},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":9737,"byte_end":9741,"line_start":206,"line_end":206,"column_start":10,"column_end":14},"name":"Mode","qualname":"::stream::Mode","value":"pub enum Mode {\n\n    /// Fast compression.\n    ///\n    /// Fast mode is usually at its best when combined with a hash chain match\n    /// finder.\n    Fast = ,\n\n    /// Normal compression.\n    ///\n    /// This is usually notably slower than fast mode. Use this together with\n    /// binary tree match finders to expose the full potential of the LZMA1 or\n    /// LZMA2 encoder.\n    Normal = ,\n}","parent":null,"children":[{"krate":0,"index":326},{"krate":0,"index":329}],"decl_id":null,"docs":" Compression modes","sig":null,"attributes":[{"value":"/ Compression modes","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":9590,"byte_end":9611,"line_start":201,"line_end":201,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":9612,"byte_end":9615,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ This selects the function used to analyze the data produced by the match","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":9616,"byte_end":9692,"line_start":203,"line_end":203,"column_start":1,"column_end":77}},{"value":"/ finder.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":9693,"byte_end":9704,"line_start":204,"line_end":204,"column_start":1,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":336},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":10833,"byte_end":10843,"line_start":236,"line_end":236,"column_start":5,"column_end":15},"name":"HashChain3","qualname":"::stream::MatchFinder::HashChain3","value":"MatchFinder::HashChain3","parent":{"krate":0,"index":335},"children":[],"decl_id":null,"docs":" Hash Chain with 2- and 3-byte hashing\n","sig":null,"attributes":[{"value":"/ Hash Chain with 2- and 3-byte hashing","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":10787,"byte_end":10828,"line_start":235,"line_end":235,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":339},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":10933,"byte_end":10943,"line_start":238,"line_end":238,"column_start":5,"column_end":15},"name":"HashChain4","qualname":"::stream::MatchFinder::HashChain4","value":"MatchFinder::HashChain4","parent":{"krate":0,"index":335},"children":[],"decl_id":null,"docs":" Hash Chain with 2-, 3-, and 4-byte hashing\n","sig":null,"attributes":[{"value":"/ Hash Chain with 2-, 3-, and 4-byte hashing","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":10882,"byte_end":10928,"line_start":237,"line_end":237,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":342},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":11023,"byte_end":11034,"line_start":241,"line_end":241,"column_start":5,"column_end":16},"name":"BinaryTree2","qualname":"::stream::MatchFinder::BinaryTree2","value":"MatchFinder::BinaryTree2","parent":{"krate":0,"index":335},"children":[],"decl_id":null,"docs":" Binary Tree with 2-byte hashing\n","sig":null,"attributes":[{"value":"/ Binary Tree with 2-byte hashing","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":10983,"byte_end":11018,"line_start":240,"line_end":240,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":345},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":11120,"byte_end":11131,"line_start":243,"line_end":243,"column_start":5,"column_end":16},"name":"BinaryTree3","qualname":"::stream::MatchFinder::BinaryTree3","value":"MatchFinder::BinaryTree3","parent":{"krate":0,"index":335},"children":[],"decl_id":null,"docs":" Binary Tree with 2- and 3-byte hashing\n","sig":null,"attributes":[{"value":"/ Binary Tree with 2- and 3-byte hashing","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":11073,"byte_end":11115,"line_start":242,"line_end":242,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":348},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":11222,"byte_end":11233,"line_start":245,"line_end":245,"column_start":5,"column_end":16},"name":"BinaryTree4","qualname":"::stream::MatchFinder::BinaryTree4","value":"MatchFinder::BinaryTree4","parent":{"krate":0,"index":335},"children":[],"decl_id":null,"docs":" Binary Tree with 2-, 3-, and 4-byte hashing\n","sig":null,"attributes":[{"value":"/ Binary Tree with 2-, 3-, and 4-byte hashing","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":11170,"byte_end":11217,"line_start":244,"line_end":244,"column_start":5,"column_end":52}}]},{"kind":"Enum","id":{"krate":0,"index":335},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":10769,"byte_end":10780,"line_start":234,"line_end":234,"column_start":10,"column_end":21},"name":"MatchFinder","qualname":"::stream::MatchFinder","value":"pub enum MatchFinder {\n\n    /// Hash Chain with 2- and 3-byte hashing\n    HashChain3 = ,\n\n    /// Hash Chain with 2-, 3-, and 4-byte hashing\n    HashChain4 = ,\n\n    /// Binary Tree with 2-byte hashing\n    BinaryTree2 = ,\n\n    /// Binary Tree with 2- and 3-byte hashing\n    BinaryTree3 = ,\n\n    /// Binary Tree with 2-, 3-, and 4-byte hashing\n    BinaryTree4 = ,\n}","parent":null,"children":[{"krate":0,"index":336},{"krate":0,"index":339},{"krate":0,"index":342},{"krate":0,"index":345},{"krate":0,"index":348}],"decl_id":null,"docs":" Match finders","sig":null,"attributes":[{"value":"/ Match finders","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":10189,"byte_end":10206,"line_start":221,"line_end":221,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":10207,"byte_end":10210,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ Match finder has major effect on both speed and compression ratio. Usually","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":10211,"byte_end":10289,"line_start":223,"line_end":223,"column_start":1,"column_end":79}},{"value":"/ hash chains are faster than binary trees.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":10290,"byte_end":10335,"line_start":224,"line_end":224,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":10336,"byte_end":10339,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ If you will use `SyncFlush` often, the hash chains may be a better choice,","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":10340,"byte_end":10418,"line_start":226,"line_end":226,"column_start":1,"column_end":79}},{"value":"/ because binary trees get much higher compression ratio penalty with","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":10419,"byte_end":10490,"line_start":227,"line_end":227,"column_start":1,"column_end":72}},{"value":"/ `SyncFlush`.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":10491,"byte_end":10507,"line_start":228,"line_end":228,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":10508,"byte_end":10511,"line_start":229,"line_end":229,"column_start":1,"column_end":4}},{"value":"/ The memory usage formulas are only rough estimates, which are closest to","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":10512,"byte_end":10588,"line_start":230,"line_end":230,"column_start":1,"column_end":77}},{"value":"/ reality when dict_size is a power of two. The formulas are  more complex in","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":10589,"byte_end":10668,"line_start":231,"line_end":231,"column_start":1,"column_end":80}},{"value":"/ reality, and can also change a little between liblzma versions.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":10669,"byte_end":10736,"line_start":232,"line_end":232,"column_start":1,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":24},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":11419,"byte_end":11433,"line_start":250,"line_end":250,"column_start":11,"column_end":25},"name":"TELL_ANY_CHECK","qualname":"::stream::TELL_ANY_CHECK","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" A flag passed when initializing a decoder, causes `process` to return\n `Status::GetCheck` as soon as the integrity check is known.\n","sig":null,"attributes":[{"value":"/ A flag passed when initializing a decoder, causes `process` to return","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":11271,"byte_end":11344,"line_start":248,"line_end":248,"column_start":1,"column_end":74}},{"value":"/ `Status::GetCheck` as soon as the integrity check is known.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":11345,"byte_end":11408,"line_start":249,"line_end":249,"column_start":1,"column_end":64}}]},{"kind":"Const","id":{"krate":0,"index":25},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":11630,"byte_end":11643,"line_start":254,"line_end":254,"column_start":11,"column_end":24},"name":"TELL_NO_CHECK","qualname":"::stream::TELL_NO_CHECK","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" A flag passed when initializing a decoder, causes `process` to return\n `Error::NoCheck` if the stream being decoded has no integrity check.\n","sig":null,"attributes":[{"value":"/ A flag passed when initializing a decoder, causes `process` to return","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":11473,"byte_end":11546,"line_start":252,"line_end":252,"column_start":1,"column_end":74}},{"value":"/ `Error::NoCheck` if the stream being decoded has no integrity check.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":11547,"byte_end":11619,"line_start":253,"line_end":253,"column_start":1,"column_end":73}}]},{"kind":"Const","id":{"krate":0,"index":26},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":11901,"byte_end":11923,"line_start":259,"line_end":259,"column_start":11,"column_end":33},"name":"TELL_UNSUPPORTED_CHECK","qualname":"::stream::TELL_UNSUPPORTED_CHECK","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" A flag passed when initializing a decoder, causes `process` to return\n `Error::UnsupportedCheck` if the stream being decoded has an integrity check\n that cannot be verified by this build of liblzma.\n","sig":null,"attributes":[{"value":"/ A flag passed when initializing a decoder, causes `process` to return","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":11682,"byte_end":11755,"line_start":256,"line_end":256,"column_start":1,"column_end":74}},{"value":"/ `Error::UnsupportedCheck` if the stream being decoded has an integrity check","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":11756,"byte_end":11836,"line_start":257,"line_end":257,"column_start":1,"column_end":81}},{"value":"/ that cannot be verified by this build of liblzma.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":11837,"byte_end":11890,"line_start":258,"line_end":258,"column_start":1,"column_end":54}}]},{"kind":"Const","id":{"krate":0,"index":27},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":12090,"byte_end":12102,"line_start":263,"line_end":263,"column_start":11,"column_end":23},"name":"IGNORE_CHECK","qualname":"::stream::IGNORE_CHECK","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" A flag passed when initializing a decoder, causes the decoder to ignore any\n integrity checks listed.\n","sig":null,"attributes":[{"value":"/ A flag passed when initializing a decoder, causes the decoder to ignore any","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":11971,"byte_end":12050,"line_start":261,"line_end":261,"column_start":1,"column_end":80}},{"value":"/ integrity checks listed.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":12051,"byte_end":12079,"line_start":262,"line_end":262,"column_start":1,"column_end":29}}]},{"kind":"Const","id":{"krate":0,"index":28},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":12276,"byte_end":12288,"line_start":267,"line_end":267,"column_start":11,"column_end":23},"name":"CONCATENATED","qualname":"::stream::CONCATENATED","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" A flag passed when initializing a decoder, indicates that the stream may be\n multiple concatenated xz files.\n","sig":null,"attributes":[{"value":"/ A flag passed when initializing a decoder, indicates that the stream may be","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":12150,"byte_end":12229,"line_start":265,"line_end":265,"column_start":1,"column_end":80}},{"value":"/ multiple concatenated xz files.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":12230,"byte_end":12265,"line_start":266,"line_end":266,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":12770,"byte_end":12786,"line_start":278,"line_end":278,"column_start":12,"column_end":28},"name":"new_easy_encoder","qualname":"<Stream>::new_easy_encoder","value":"pub fn new_easy_encoder(u32, Check) -> Result<Stream, Error>","parent":null,"children":[],"decl_id":null,"docs":" Initialize .xz stream encoder using a preset number","sig":null,"attributes":[{"value":"/ Initialize .xz stream encoder using a preset number","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":12344,"byte_end":12399,"line_start":270,"line_end":270,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":12404,"byte_end":12407,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ This is intended to be used by most for encoding data. The `preset`","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":12412,"byte_end":12483,"line_start":272,"line_end":272,"column_start":5,"column_end":76}},{"value":"/ argument is a number 0-9 indicating the compression level to use, and","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":12488,"byte_end":12561,"line_start":273,"line_end":273,"column_start":5,"column_end":78}},{"value":"/ normally 6 is a reasonable default.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":12566,"byte_end":12605,"line_start":274,"line_end":274,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":12610,"byte_end":12613,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ The `check` argument is the integrity check to insert at the end of the","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":12618,"byte_end":12693,"line_start":276,"line_end":276,"column_start":5,"column_end":80}},{"value":"/ stream. The default of `Crc64` is typically appropriate.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":12698,"byte_end":12758,"line_start":277,"line_end":277,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":13872,"byte_end":13888,"line_start":301,"line_end":301,"column_start":12,"column_end":28},"name":"new_lzma_encoder","qualname":"<Stream>::new_lzma_encoder","value":"pub fn new_lzma_encoder(&LzmaOptions) -> Result<Stream, Error>","parent":null,"children":[],"decl_id":null,"docs":" Initialize .lzma encoder (legacy file format)","sig":null,"attributes":[{"value":"/ Initialize .lzma encoder (legacy file format)","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":13157,"byte_end":13206,"line_start":288,"line_end":288,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":13211,"byte_end":13214,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ The .lzma format is sometimes called the LZMA_Alone format, which is the","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":13219,"byte_end":13295,"line_start":290,"line_end":290,"column_start":5,"column_end":81}},{"value":"/ reason for the name of this function. The .lzma format supports only the","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":13300,"byte_end":13376,"line_start":291,"line_end":291,"column_start":5,"column_end":81}},{"value":"/ LZMA1 filter. There is no support for integrity checks like CRC32.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":13381,"byte_end":13451,"line_start":292,"line_end":292,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":13456,"byte_end":13459,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ Use this function if and only if you need to create files readable by","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":13464,"byte_end":13537,"line_start":294,"line_end":294,"column_start":5,"column_end":78}},{"value":"/ legacy LZMA tools such as LZMA Utils 4.32.x. Moving to the .xz format","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":13542,"byte_end":13615,"line_start":295,"line_end":295,"column_start":5,"column_end":78}},{"value":"/ (the `new_easy_encoder` function) is strongly recommended.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":13620,"byte_end":13682,"line_start":296,"line_end":296,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":13687,"byte_end":13690,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ The valid action values for `process` are `Run` and `Finish`. No kind","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":13695,"byte_end":13768,"line_start":298,"line_end":298,"column_start":5,"column_end":78}},{"value":"/ of flushing is supported, because the file format doesn't make it","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":13773,"byte_end":13842,"line_start":299,"line_end":299,"column_start":5,"column_end":74}},{"value":"/ possible.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":13847,"byte_end":13860,"line_start":300,"line_end":300,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":14317,"byte_end":14335,"line_start":313,"line_end":313,"column_start":12,"column_end":30},"name":"new_stream_encoder","qualname":"<Stream>::new_stream_encoder","value":"pub fn new_stream_encoder(&Filters, Check) -> Result<Stream, Error>","parent":null,"children":[],"decl_id":null,"docs":" Initialize .xz Stream encoder using a custom filter chain","sig":null,"attributes":[{"value":"/ Initialize .xz Stream encoder using a custom filter chain","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":14133,"byte_end":14194,"line_start":309,"line_end":309,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":14199,"byte_end":14202,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ This function is similar to `new_easy_encoder` but a custom filter chain","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":14207,"byte_end":14283,"line_start":311,"line_end":311,"column_start":5,"column_end":81}},{"value":"/ is specified.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":14288,"byte_end":14305,"line_start":312,"line_end":312,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":15012,"byte_end":15030,"line_start":329,"line_end":329,"column_start":12,"column_end":30},"name":"new_stream_decoder","qualname":"<Stream>::new_stream_decoder","value":"pub fn new_stream_decoder(u64, u32) -> Result<Stream, Error>","parent":null,"children":[],"decl_id":null,"docs":" Initialize a .xz stream decoder.","sig":null,"attributes":[{"value":"/ Initialize a .xz stream decoder.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":14764,"byte_end":14800,"line_start":324,"line_end":324,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":14805,"byte_end":14808,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ The maximum memory usage can be specified along with flags such as","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":14813,"byte_end":14883,"line_start":326,"line_end":326,"column_start":5,"column_end":75}},{"value":"/ `TELL_ANY_CHECK`, `TELL_NO_CHECK`, `TELL_UNSUPPORTED_CHECK`,","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":14888,"byte_end":14952,"line_start":327,"line_end":327,"column_start":5,"column_end":69}},{"value":"/ `TELL_IGNORE_CHECK`, or `CONCATENATED`.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":14957,"byte_end":15000,"line_start":328,"line_end":328,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":15529,"byte_end":15545,"line_start":343,"line_end":343,"column_start":12,"column_end":28},"name":"new_lzma_decoder","qualname":"<Stream>::new_lzma_decoder","value":"pub fn new_lzma_decoder(u64) -> Result<Stream, Error>","parent":null,"children":[],"decl_id":null,"docs":" Initialize a .lzma stream decoder.","sig":null,"attributes":[{"value":"/ Initialize a .lzma stream decoder.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":15415,"byte_end":15453,"line_start":340,"line_end":340,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":15458,"byte_end":15461,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ The maximum memory usage can also be specified.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":15466,"byte_end":15517,"line_start":342,"line_end":342,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":15943,"byte_end":15959,"line_start":354,"line_end":354,"column_start":12,"column_end":28},"name":"new_auto_decoder","qualname":"<Stream>::new_auto_decoder","value":"pub fn new_auto_decoder(u64, u32) -> Result<Stream, Error>","parent":null,"children":[],"decl_id":null,"docs":" Initialize a decoder which will choose a stream/lzma formats depending\n on the input stream.\n","sig":null,"attributes":[{"value":"/ Initialize a decoder which will choose a stream/lzma formats depending","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":15828,"byte_end":15902,"line_start":352,"line_end":352,"column_start":5,"column_end":79}},{"value":"/ on the input stream.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":15907,"byte_end":15931,"line_start":353,"line_end":353,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":16608,"byte_end":16615,"line_start":369,"line_end":369,"column_start":12,"column_end":19},"name":"process","qualname":"<Stream>::process","value":"pub fn process(&mut Self, &[u8], &mut [u8], Action) -> Result<Status, Error>","parent":null,"children":[],"decl_id":null,"docs":" Processes some data from input into an output buffer.","sig":null,"attributes":[{"value":"/ Processes some data from input into an output buffer.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":16308,"byte_end":16365,"line_start":364,"line_end":364,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":16370,"byte_end":16373,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ This will perform the appropriate encoding or decoding operation","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":16378,"byte_end":16446,"line_start":366,"line_end":366,"column_start":5,"column_end":73}},{"value":"/ depending on the kind of underlying stream. Documentation for the","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":16451,"byte_end":16520,"line_start":367,"line_end":367,"column_start":5,"column_end":74}},{"value":"/ various `action` arguments can be found on the respective variants.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":16525,"byte_end":16596,"line_start":368,"line_end":368,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":17391,"byte_end":17402,"line_start":388,"line_end":388,"column_start":12,"column_end":23},"name":"process_vec","qualname":"<Stream>::process_vec","value":"pub fn process_vec(&mut Self, &[u8], &mut Vec<u8>, Action)\n-> Result<Status, Error>","parent":null,"children":[],"decl_id":null,"docs":" Performs the same data as `process`, but places output data in a `Vec`.","sig":null,"attributes":[{"value":"/ Performs the same data as `process`, but places output data in a `Vec`.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":17088,"byte_end":17163,"line_start":383,"line_end":383,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":17168,"byte_end":17171,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ This function will use the extra capacity of `output` as a destination","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":17176,"byte_end":17250,"line_start":385,"line_end":385,"column_start":5,"column_end":79}},{"value":"/ for bytes to be placed. The length of `output` will automatically get","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":17255,"byte_end":17328,"line_start":386,"line_end":386,"column_start":5,"column_end":78}},{"value":"/ updated after the operation has completed.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":17333,"byte_end":17379,"line_start":387,"line_end":387,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":18113,"byte_end":18121,"line_start":408,"line_end":408,"column_start":12,"column_end":20},"name":"total_in","qualname":"<Stream>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total amount of input bytes consumed by this stream.\n","sig":null,"attributes":[{"value":"/ Returns the total amount of input bytes consumed by this stream.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":18033,"byte_end":18101,"line_start":407,"line_end":407,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":18249,"byte_end":18258,"line_start":413,"line_end":413,"column_start":12,"column_end":21},"name":"total_out","qualname":"<Stream>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total amount of bytes produced by this stream.\n","sig":null,"attributes":[{"value":"/ Returns the total amount of bytes produced by this stream.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":18175,"byte_end":18237,"line_start":412,"line_end":412,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":18449,"byte_end":18457,"line_start":420,"line_end":420,"column_start":12,"column_end":20},"name":"memlimit","qualname":"<Stream>::memlimit","value":"pub fn memlimit(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get the current memory usage limit.","sig":null,"attributes":[{"value":"/ Get the current memory usage limit.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":18313,"byte_end":18352,"line_start":417,"line_end":417,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":18357,"byte_end":18360,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ This is only supported if the underlying stream supports a memlimit.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":18365,"byte_end":18437,"line_start":419,"line_end":419,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":18746,"byte_end":18758,"line_start":428,"line_end":428,"column_start":12,"column_end":24},"name":"set_memlimit","qualname":"<Stream>::set_memlimit","value":"pub fn set_memlimit(&mut Self, u64) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Set the current memory usage limit.","sig":null,"attributes":[{"value":"/ Set the current memory usage limit.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":18543,"byte_end":18582,"line_start":424,"line_end":424,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":18587,"byte_end":18590,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ This can return `Error::MemLimit` if the new limit is too small or","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":18595,"byte_end":18665,"line_start":426,"line_end":426,"column_start":5,"column_end":75}},{"value":"/ `Error::Program` if this stream doesn't take a memory limit.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":18670,"byte_end":18734,"line_start":427,"line_end":427,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":19110,"byte_end":19120,"line_start":439,"line_end":439,"column_start":12,"column_end":22},"name":"new_preset","qualname":"<LzmaOptions>::new_preset","value":"pub fn new_preset(u32) -> Result<LzmaOptions, Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new blank set of options for encoding.","sig":null,"attributes":[{"value":"/ Creates a new blank set of options for encoding.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":18936,"byte_end":18988,"line_start":435,"line_end":435,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":18993,"byte_end":18996,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ The `preset` argument is the compression level to use, typically in the","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":19001,"byte_end":19076,"line_start":437,"line_end":437,"column_start":5,"column_end":80}},{"value":"/ range of 0-9.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":19081,"byte_end":19098,"line_start":438,"line_end":438,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":19743,"byte_end":19752,"line_start":457,"line_end":457,"column_start":12,"column_end":21},"name":"dict_size","qualname":"<LzmaOptions>::dict_size","value":"pub fn dict_size(&mut Self, u32) -> &mut LzmaOptions","parent":null,"children":[],"decl_id":null,"docs":" Configures the dictionary size, in bytes","sig":null,"attributes":[{"value":"/ Configures the dictionary size, in bytes","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":19471,"byte_end":19515,"line_start":451,"line_end":451,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":19520,"byte_end":19523,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ Dictionary size indicates how many bytes of the recently processed","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":19528,"byte_end":19598,"line_start":453,"line_end":453,"column_start":5,"column_end":75}},{"value":"/ uncompressed data is kept in memory.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":19603,"byte_end":19643,"line_start":454,"line_end":454,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":19648,"byte_end":19651,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ The minimum dictionary size is 4096 bytes and the default is 2^23, 8MB.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":19656,"byte_end":19731,"line_start":456,"line_end":456,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":20281,"byte_end":20301,"line_start":470,"line_end":470,"column_start":12,"column_end":32},"name":"literal_context_bits","qualname":"<LzmaOptions>::literal_context_bits","value":"pub fn literal_context_bits(&mut Self, u32) -> &mut LzmaOptions","parent":null,"children":[],"decl_id":null,"docs":" Configures the number of literal context bits.","sig":null,"attributes":[{"value":"/ Configures the number of literal context bits.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":19856,"byte_end":19906,"line_start":462,"line_end":462,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":19911,"byte_end":19914,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ How many of the highest bits of the previous uncompressed eight-bit byte","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":19919,"byte_end":19995,"line_start":464,"line_end":464,"column_start":5,"column_end":81}},{"value":"/ (also known as `literal') are taken into account when predicting the","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":20000,"byte_end":20072,"line_start":465,"line_end":465,"column_start":5,"column_end":77}},{"value":"/ bits of the next literal.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":20077,"byte_end":20106,"line_start":466,"line_end":466,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":20111,"byte_end":20114,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ The maximum value to this is 4 and the default is 3. It is not currently","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":20119,"byte_end":20195,"line_start":468,"line_end":468,"column_start":5,"column_end":81}},{"value":"/ supported if this plus `literal_position_bits` is greater than 4.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":20200,"byte_end":20269,"line_start":469,"line_end":469,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":20724,"byte_end":20745,"line_start":482,"line_end":482,"column_start":12,"column_end":33},"name":"literal_position_bits","qualname":"<LzmaOptions>::literal_position_bits","value":"pub fn literal_position_bits(&mut Self, u32) -> &mut LzmaOptions","parent":null,"children":[],"decl_id":null,"docs":" Configures the number of literal position bits.","sig":null,"attributes":[{"value":"/ Configures the number of literal position bits.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":20398,"byte_end":20449,"line_start":475,"line_end":475,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":20454,"byte_end":20457,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ This affects what kind of alignment in the uncompressed data is assumed","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":20462,"byte_end":20537,"line_start":477,"line_end":477,"column_start":5,"column_end":80}},{"value":"/ when encoding literals. A literal is a single 8-bit byte. See","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":20542,"byte_end":20607,"line_start":478,"line_end":478,"column_start":5,"column_end":70}},{"value":"/ `position_bits` for more information about alignment.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":20612,"byte_end":20669,"line_start":479,"line_end":479,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":20674,"byte_end":20677,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ The default for this is 0.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":20682,"byte_end":20712,"line_start":481,"line_end":481,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":21806,"byte_end":21819,"line_start":503,"line_end":503,"column_start":12,"column_end":25},"name":"position_bits","qualname":"<LzmaOptions>::position_bits","value":"pub fn position_bits(&mut Self, u32) -> &mut LzmaOptions","parent":null,"children":[],"decl_id":null,"docs":" Configures the number of position bits.","sig":null,"attributes":[{"value":"/ Configures the number of position bits.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":20842,"byte_end":20885,"line_start":487,"line_end":487,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":20890,"byte_end":20893,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ Position bits affects what kind of alignment in the uncompressed data is","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":20898,"byte_end":20974,"line_start":489,"line_end":489,"column_start":5,"column_end":81}},{"value":"/ assumed in general. The default of 2 means four-byte alignment (2^ pb","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":20979,"byte_end":21052,"line_start":490,"line_end":490,"column_start":5,"column_end":78}},{"value":"/ =2^2=4), which is often a good choice when there's no better guess.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":21057,"byte_end":21128,"line_start":491,"line_end":491,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":21133,"byte_end":21136,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ When the aligment is known, setting pb accordingly may reduce the file","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":21141,"byte_end":21215,"line_start":493,"line_end":493,"column_start":5,"column_end":79}},{"value":"/ size a little. E.g. with text files having one-byte alignment (US-ASCII,","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":21220,"byte_end":21296,"line_start":494,"line_end":494,"column_start":5,"column_end":81}},{"value":"/ ISO-8859-*, UTF-8), setting pb=0 can improve compression slightly. For","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":21301,"byte_end":21375,"line_start":495,"line_end":495,"column_start":5,"column_end":79}},{"value":"/ UTF-16 text, pb=1 is a good choice. If the alignment is an odd number","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":21380,"byte_end":21453,"line_start":496,"line_end":496,"column_start":5,"column_end":78}},{"value":"/ like 3 bytes, pb=0 might be the best choice.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":21458,"byte_end":21506,"line_start":497,"line_end":497,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":21511,"byte_end":21514,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ Even though the assumed alignment can be adjusted with pb and lp, LZMA1","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":21519,"byte_end":21594,"line_start":499,"line_end":499,"column_start":5,"column_end":80}},{"value":"/ and LZMA2 still slightly favor 16-byte alignment. It might be worth","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":21599,"byte_end":21670,"line_start":500,"line_end":500,"column_start":5,"column_end":76}},{"value":"/ taking into account when designing file formats that are likely to be","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":21675,"byte_end":21748,"line_start":501,"line_end":501,"column_start":5,"column_end":78}},{"value":"/ often compressed with LZMA1 or LZMA2.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":21753,"byte_end":21794,"line_start":502,"line_end":502,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":21964,"byte_end":21968,"line_start":509,"line_end":509,"column_start":12,"column_end":16},"name":"mode","qualname":"<LzmaOptions>::mode","value":"pub fn mode(&mut Self, Mode) -> &mut LzmaOptions","parent":null,"children":[],"decl_id":null,"docs":" Configures the compression mode.\n","sig":null,"attributes":[{"value":"/ Configures the compression mode.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":21916,"byte_end":21952,"line_start":508,"line_end":508,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":22946,"byte_end":22954,"line_start":529,"line_end":529,"column_start":12,"column_end":20},"name":"nice_len","qualname":"<LzmaOptions>::nice_len","value":"pub fn nice_len(&mut Self, u32) -> &mut LzmaOptions","parent":null,"children":[],"decl_id":null,"docs":" Configures the nice length of a match.","sig":null,"attributes":[{"value":"/ Configures the nice length of a match.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":22091,"byte_end":22133,"line_start":514,"line_end":514,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":22138,"byte_end":22141,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ This determines how many bytes the encoder compares from the match","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":22146,"byte_end":22216,"line_start":516,"line_end":516,"column_start":5,"column_end":75}},{"value":"/ candidates when looking for the best match. Once a match of at least","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":22221,"byte_end":22293,"line_start":517,"line_end":517,"column_start":5,"column_end":77}},{"value":"/ `nice_len` bytes long is found, the encoder stops looking for better","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":22298,"byte_end":22370,"line_start":518,"line_end":518,"column_start":5,"column_end":77}},{"value":"/ candidates and encodes the match. (Naturally, if the found match is","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":22375,"byte_end":22446,"line_start":519,"line_end":519,"column_start":5,"column_end":76}},{"value":"/ actually longer than `nice_len`, the actual length is encoded; it's not","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":22451,"byte_end":22526,"line_start":520,"line_end":520,"column_start":5,"column_end":80}},{"value":"/ truncated to `nice_len`.)","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":22531,"byte_end":22560,"line_start":521,"line_end":521,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":22565,"byte_end":22568,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ Bigger values usually increase the compression ratio and compression","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":22573,"byte_end":22645,"line_start":523,"line_end":523,"column_start":5,"column_end":77}},{"value":"/ time. For most files, 32 to 128 is a good value, which gives very good","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":22650,"byte_end":22724,"line_start":524,"line_end":524,"column_start":5,"column_end":79}},{"value":"/ compression ratio at good speed.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":22729,"byte_end":22765,"line_start":525,"line_end":525,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":22770,"byte_end":22773,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ The exact minimum value depends on the match finder. The maximum is 273,","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":22778,"byte_end":22854,"line_start":527,"line_end":527,"column_start":5,"column_end":81}},{"value":"/ which is the maximum length of a match that LZMA1 and LZMA2 can encode.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":22859,"byte_end":22934,"line_start":528,"line_end":528,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":23102,"byte_end":23114,"line_start":535,"line_end":535,"column_start":12,"column_end":24},"name":"match_finder","qualname":"<LzmaOptions>::match_finder","value":"pub fn match_finder(&mut Self, MatchFinder) -> &mut LzmaOptions","parent":null,"children":[],"decl_id":null,"docs":" Configures the match finder ID.\n","sig":null,"attributes":[{"value":"/ Configures the match finder ID.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":23055,"byte_end":23090,"line_start":534,"line_end":534,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":24678,"byte_end":24683,"line_start":566,"line_end":566,"column_start":12,"column_end":17},"name":"depth","qualname":"<LzmaOptions>::depth","value":"pub fn depth(&mut Self, u32) -> &mut LzmaOptions","parent":null,"children":[],"decl_id":null,"docs":" Maximum search depth in the match finder.","sig":null,"attributes":[{"value":"/ Maximum search depth in the match finder.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":23246,"byte_end":23291,"line_start":540,"line_end":540,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":23296,"byte_end":23299,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ For every input byte, match finder searches through the hash chain or","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":23304,"byte_end":23377,"line_start":542,"line_end":542,"column_start":5,"column_end":78}},{"value":"/ binary tree in a loop, each iteration going one step deeper in the chain","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":23382,"byte_end":23458,"line_start":543,"line_end":543,"column_start":5,"column_end":81}},{"value":"/ or tree. The searching stops if","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":23463,"byte_end":23498,"line_start":544,"line_end":544,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":23503,"byte_end":23506,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/  - a match of at least `nice_len` bytes long is found;","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":23511,"byte_end":23569,"line_start":546,"line_end":546,"column_start":5,"column_end":63}},{"value":"/  - all match candidates from the hash chain or binary tree have","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":23574,"byte_end":23641,"line_start":547,"line_end":547,"column_start":5,"column_end":72}},{"value":"/    been checked; or","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":23646,"byte_end":23669,"line_start":548,"line_end":548,"column_start":5,"column_end":28}},{"value":"/  - maximum search depth is reached.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":23674,"byte_end":23713,"line_start":549,"line_end":549,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":23718,"byte_end":23721,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ Maximum search depth is needed to prevent the match finder from wasting","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":23726,"byte_end":23801,"line_start":551,"line_end":551,"column_start":5,"column_end":80}},{"value":"/ too much time in case there are lots of short match candidates. On the","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":23806,"byte_end":23880,"line_start":552,"line_end":552,"column_start":5,"column_end":79}},{"value":"/ other hand, stopping the search before all candidates have been checked","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":23885,"byte_end":23960,"line_start":553,"line_end":553,"column_start":5,"column_end":80}},{"value":"/ can reduce compression ratio.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":23965,"byte_end":23998,"line_start":554,"line_end":554,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":24003,"byte_end":24006,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ Setting depth to zero tells liblzma to use an automatic default value,","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":24011,"byte_end":24085,"line_start":556,"line_end":556,"column_start":5,"column_end":79}},{"value":"/ that depends on the selected match finder and nice_len.  The default is","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":24090,"byte_end":24165,"line_start":557,"line_end":557,"column_start":5,"column_end":80}},{"value":"/ in the range [4, 200] or so (it may vary between liblzma versions).","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":24170,"byte_end":24241,"line_start":558,"line_end":558,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":24246,"byte_end":24249,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ Using a bigger depth value than the default can increase compression","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":24254,"byte_end":24326,"line_start":560,"line_end":560,"column_start":5,"column_end":77}},{"value":"/ ratio in some cases. There is no strict maximum value, but high values","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":24331,"byte_end":24405,"line_start":561,"line_end":561,"column_start":5,"column_end":79}},{"value":"/ (thousands or millions) should be used with care: the encoder could","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":24410,"byte_end":24481,"line_start":562,"line_end":562,"column_start":5,"column_end":76}},{"value":"/ remain fast enough with typical input, but malicious input could cause","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":24486,"byte_end":24560,"line_start":563,"line_end":563,"column_start":5,"column_end":79}},{"value":"/ the match finder to slow down dramatically, possibly creating a denial","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":24565,"byte_end":24639,"line_start":564,"line_end":564,"column_start":5,"column_end":79}},{"value":"/ of service attack.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":24644,"byte_end":24666,"line_start":565,"line_end":565,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":24873,"byte_end":24885,"line_start":574,"line_end":574,"column_start":12,"column_end":24},"name":"is_supported","qualname":"<Check>::is_supported","value":"pub fn is_supported(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test if this check is supported in this build of liblzma.\n","sig":null,"attributes":[{"value":"/ Test if this check is supported in this build of liblzma.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":24800,"byte_end":24861,"line_start":573,"line_end":573,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":25147,"byte_end":25159,"line_start":584,"line_end":584,"column_start":12,"column_end":24},"name":"is_supported","qualname":"<MatchFinder>::is_supported","value":"pub fn is_supported(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test if this match finder is supported in this build of liblzma.\n","sig":null,"attributes":[{"value":"/ Test if this match finder is supported in this build of liblzma.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":25067,"byte_end":25135,"line_start":583,"line_end":583,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":25400,"byte_end":25403,"line_start":594,"line_end":594,"column_start":12,"column_end":15},"name":"new","qualname":"<Filters>::new","value":"pub fn new() -> Filters","parent":null,"children":[],"decl_id":null,"docs":" Creates a new filter chain with no filters.\n","sig":null,"attributes":[{"value":"/ Creates a new filter chain with no filters.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":25341,"byte_end":25388,"line_start":593,"line_end":593,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":26072,"byte_end":26077,"line_start":612,"line_end":612,"column_start":12,"column_end":17},"name":"lzma1","qualname":"<Filters>::lzma1","value":"pub fn lzma1(&mut Self, &LzmaOptions) -> &mut Filters","parent":null,"children":[],"decl_id":null,"docs":" Add an LZMA1 filter.","sig":null,"attributes":[{"value":"/ Add an LZMA1 filter.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":25650,"byte_end":25674,"line_start":604,"line_end":604,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":25679,"byte_end":25682,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ LZMA1 is the very same thing as what was called just LZMA in LZMA Utils,","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":25687,"byte_end":25763,"line_start":606,"line_end":606,"column_start":5,"column_end":81}},{"value":"/ 7-Zip, and LZMA SDK. It's called LZMA1 here to prevent developers from","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":25768,"byte_end":25842,"line_start":607,"line_end":607,"column_start":5,"column_end":79}},{"value":"/ accidentally using LZMA when they actually want LZMA2.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":25847,"byte_end":25905,"line_start":608,"line_end":608,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":25910,"byte_end":25913,"line_start":609,"line_end":609,"column_start":5,"column_end":8}},{"value":"/ LZMA1 shouldn't be used for new applications unless you _really_ know","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":25918,"byte_end":25991,"line_start":610,"line_end":610,"column_start":5,"column_end":78}},{"value":"/ what you are doing.  LZMA2 is almost always a better choice.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":25996,"byte_end":26060,"line_start":611,"line_end":611,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":26792,"byte_end":26797,"line_start":628,"line_end":628,"column_start":12,"column_end":17},"name":"lzma2","qualname":"<Filters>::lzma2","value":"pub fn lzma2(&mut Self, &LzmaOptions) -> &mut Filters","parent":null,"children":[],"decl_id":null,"docs":" Add an LZMA2 filter.","sig":null,"attributes":[{"value":"/ Add an LZMA2 filter.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":26378,"byte_end":26402,"line_start":621,"line_end":621,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":26407,"byte_end":26410,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ Usually you want this instead of LZMA1. Compared to LZMA1, LZMA2 adds","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":26415,"byte_end":26488,"line_start":623,"line_end":623,"column_start":5,"column_end":78}},{"value":"/ support for `SyncFlush`, uncompressed chunks (smaller expansion when","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":26493,"byte_end":26565,"line_start":624,"line_end":624,"column_start":5,"column_end":77}},{"value":"/ trying to compress uncompressible data), possibility to change","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":26570,"byte_end":26636,"line_start":625,"line_end":625,"column_start":5,"column_end":71}},{"value":"/ `literal_context_bits`/`literal_position_bits`/`position_bits` in the","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":26641,"byte_end":26714,"line_start":626,"line_end":626,"column_start":5,"column_end":78}},{"value":"/ middle of encoding, and some other internal improvements.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":26719,"byte_end":26780,"line_start":627,"line_end":627,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":27171,"byte_end":27174,"line_start":640,"line_end":640,"column_start":12,"column_end":15},"name":"x86","qualname":"<Filters>::x86","value":"pub fn x86(&mut Self) -> &mut Filters","parent":null,"children":[],"decl_id":null,"docs":" Add a filter for x86 binaries.\n","sig":null,"attributes":[{"value":"/ Add a filter for x86 binaries.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":27125,"byte_end":27159,"line_start":639,"line_end":639,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":27395,"byte_end":27402,"line_start":648,"line_end":648,"column_start":12,"column_end":19},"name":"powerpc","qualname":"<Filters>::powerpc","value":"pub fn powerpc(&mut Self) -> &mut Filters","parent":null,"children":[],"decl_id":null,"docs":" Add a filter for PowerPC binaries.\n","sig":null,"attributes":[{"value":"/ Add a filter for PowerPC binaries.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":27345,"byte_end":27383,"line_start":647,"line_end":647,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":27635,"byte_end":27639,"line_start":656,"line_end":656,"column_start":12,"column_end":16},"name":"ia64","qualname":"<Filters>::ia64","value":"pub fn ia64(&mut Self) -> &mut Filters","parent":null,"children":[],"decl_id":null,"docs":" Add a filter for IA-64 (itanium) binaries.\n","sig":null,"attributes":[{"value":"/ Add a filter for IA-64 (itanium) binaries.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":27577,"byte_end":27623,"line_start":655,"line_end":655,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":27857,"byte_end":27860,"line_start":664,"line_end":664,"column_start":12,"column_end":15},"name":"arm","qualname":"<Filters>::arm","value":"pub fn arm(&mut Self) -> &mut Filters","parent":null,"children":[],"decl_id":null,"docs":" Add a filter for ARM binaries.\n","sig":null,"attributes":[{"value":"/ Add a filter for ARM binaries.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":27811,"byte_end":27845,"line_start":663,"line_end":663,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":28083,"byte_end":28092,"line_start":672,"line_end":672,"column_start":12,"column_end":21},"name":"arm_thumb","qualname":"<Filters>::arm_thumb","value":"pub fn arm_thumb(&mut Self) -> &mut Filters","parent":null,"children":[],"decl_id":null,"docs":" Add a filter for ARM-Thumb binaries.\n","sig":null,"attributes":[{"value":"/ Add a filter for ARM-Thumb binaries.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":28031,"byte_end":28071,"line_start":671,"line_end":671,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":28316,"byte_end":28321,"line_start":680,"line_end":680,"column_start":12,"column_end":17},"name":"sparc","qualname":"<Filters>::sparc","value":"pub fn sparc(&mut Self) -> &mut Filters","parent":null,"children":[],"decl_id":null,"docs":" Add a filter for SPARC binaries.\n","sig":null,"attributes":[{"value":"/ Add a filter for SPARC binaries.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":28268,"byte_end":28304,"line_start":679,"line_end":679,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":28779,"byte_end":28782,"line_start":696,"line_end":696,"column_start":12,"column_end":15},"name":"new","qualname":"<MtStreamBuilder>::new","value":"pub fn new() -> MtStreamBuilder","parent":null,"children":[],"decl_id":null,"docs":" Creates a new blank builder to create a multithreaded encoding `Stream`.\n","sig":null,"attributes":[{"value":"/ Creates a new blank builder to create a multithreaded encoding `Stream`.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":28691,"byte_end":28767,"line_start":695,"line_end":695,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":29091,"byte_end":29098,"line_start":708,"line_end":708,"column_start":12,"column_end":19},"name":"threads","qualname":"<MtStreamBuilder>::threads","value":"pub fn threads(&mut Self, u32) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Configures the number of worker threads to use\n","sig":null,"attributes":[{"value":"/ Configures the number of worker threads to use","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":29029,"byte_end":29079,"line_start":707,"line_end":707,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":30369,"byte_end":30379,"line_start":734,"line_end":734,"column_start":12,"column_end":22},"name":"block_size","qualname":"<MtStreamBuilder>::block_size","value":"pub fn block_size(&mut Self, u64) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Configures the maximum uncompressed size of a block","sig":null,"attributes":[{"value":"/ Configures the maximum uncompressed size of a block","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":29199,"byte_end":29254,"line_start":713,"line_end":713,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":29259,"byte_end":29262,"line_start":714,"line_end":714,"column_start":5,"column_end":8}},{"value":"/ The encoder will start a new .xz block every `block_size` bytes.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":29267,"byte_end":29335,"line_start":715,"line_end":715,"column_start":5,"column_end":73}},{"value":"/ Using `FullFlush` or `FullBarrier` with `process` the caller may tell","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":29340,"byte_end":29413,"line_start":716,"line_end":716,"column_start":5,"column_end":78}},{"value":"/ liblzma to start a new block earlier.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":29418,"byte_end":29459,"line_start":717,"line_end":717,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":29464,"byte_end":29467,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ With LZMA2, a recommended block size is 2-4 times the LZMA2 dictionary","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":29472,"byte_end":29546,"line_start":719,"line_end":719,"column_start":5,"column_end":79}},{"value":"/ size. With very small dictionaries, it is recommended to use at least 1","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":29551,"byte_end":29626,"line_start":720,"line_end":720,"column_start":5,"column_end":80}},{"value":"/ MiB block size for good compression ratio, even if this is more than","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":29631,"byte_end":29703,"line_start":721,"line_end":721,"column_start":5,"column_end":77}},{"value":"/ four times the dictionary size. Note that these are only recommendations","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":29708,"byte_end":29784,"line_start":722,"line_end":722,"column_start":5,"column_end":81}},{"value":"/ for typical use cases; feel free to use other values. Just keep in mind","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":29789,"byte_end":29864,"line_start":723,"line_end":723,"column_start":5,"column_end":80}},{"value":"/ that using a block size less than the LZMA2 dictionary size is waste of","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":29869,"byte_end":29944,"line_start":724,"line_end":724,"column_start":5,"column_end":80}},{"value":"/ RAM.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":29949,"byte_end":29957,"line_start":725,"line_end":725,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":29962,"byte_end":29965,"line_start":726,"line_end":726,"column_start":5,"column_end":8}},{"value":"/ Set this to 0 to let liblzma choose the block size depending on the","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":29970,"byte_end":30041,"line_start":727,"line_end":727,"column_start":5,"column_end":76}},{"value":"/ compression options. For LZMA2 it will be 3*`dict_size` or 1 MiB,","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":30046,"byte_end":30115,"line_start":728,"line_end":728,"column_start":5,"column_end":74}},{"value":"/ whichever is more.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":30120,"byte_end":30142,"line_start":729,"line_end":729,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":30147,"byte_end":30150,"line_start":730,"line_end":730,"column_start":5,"column_end":8}},{"value":"/ For each thread, about 3 * `block_size` bytes of memory will be","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":30155,"byte_end":30222,"line_start":731,"line_end":731,"column_start":5,"column_end":72}},{"value":"/ allocated. This may change in later liblzma versions. If so, the memory","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":30227,"byte_end":30302,"line_start":732,"line_end":732,"column_start":5,"column_end":80}},{"value":"/ usage will probably be reduced, not increased.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":30307,"byte_end":30357,"line_start":733,"line_end":733,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":31634,"byte_end":31644,"line_start":759,"line_end":759,"column_start":12,"column_end":22},"name":"timeout_ms","qualname":"<MtStreamBuilder>::timeout_ms","value":"pub fn timeout_ms(&mut Self, u32) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Timeout to allow `process` to return early","sig":null,"attributes":[{"value":"/ Timeout to allow `process` to return early","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":30489,"byte_end":30535,"line_start":739,"line_end":739,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":30540,"byte_end":30543,"line_start":740,"line_end":740,"column_start":5,"column_end":8}},{"value":"/ Multithreading can make liblzma to consume input and produce output in a","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":30548,"byte_end":30624,"line_start":741,"line_end":741,"column_start":5,"column_end":81}},{"value":"/ very bursty way: it may first read a lot of input to fill internal","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":30629,"byte_end":30699,"line_start":742,"line_end":742,"column_start":5,"column_end":75}},{"value":"/ buffers, then no input or output occurs for a while.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":30704,"byte_end":30760,"line_start":743,"line_end":743,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":30765,"byte_end":30768,"line_start":744,"line_end":744,"column_start":5,"column_end":8}},{"value":"/ In single-threaded mode, `process` won't return until it has either","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":30773,"byte_end":30844,"line_start":745,"line_end":745,"column_start":5,"column_end":76}},{"value":"/ consumed all the input or filled the output buffer. If this is done in","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":30849,"byte_end":30923,"line_start":746,"line_end":746,"column_start":5,"column_end":79}},{"value":"/ multithreaded mode, it may cause a call `process` to take even tens of","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":30928,"byte_end":31002,"line_start":747,"line_end":747,"column_start":5,"column_end":79}},{"value":"/ seconds, which isn't acceptable in all applications.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":31007,"byte_end":31063,"line_start":748,"line_end":748,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":31068,"byte_end":31071,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/ To avoid very long blocking times in `process`, a timeout (in","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":31076,"byte_end":31141,"line_start":750,"line_end":750,"column_start":5,"column_end":70}},{"value":"/ milliseconds) may be set here. If `process would block longer than","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":31146,"byte_end":31216,"line_start":751,"line_end":751,"column_start":5,"column_end":75}},{"value":"/ this number of milliseconds, it will return with `Ok`. Reasonable","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":31221,"byte_end":31290,"line_start":752,"line_end":752,"column_start":5,"column_end":74}},{"value":"/ values are 100 ms or more. The xz command line tool uses 300 ms.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":31295,"byte_end":31363,"line_start":753,"line_end":753,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":31368,"byte_end":31371,"line_start":754,"line_end":754,"column_start":5,"column_end":8}},{"value":"/ If long blocking times are fine for you, set timeout to a special","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":31376,"byte_end":31445,"line_start":755,"line_end":755,"column_start":5,"column_end":74}},{"value":"/ value of 0, which will disable the timeout mechanism and will make","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":31450,"byte_end":31520,"line_start":756,"line_end":756,"column_start":5,"column_end":75}},{"value":"/ `process` block until all the input is consumed or the output","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":31525,"byte_end":31590,"line_start":757,"line_end":757,"column_start":5,"column_end":70}},{"value":"/ buffer has been filled.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":31595,"byte_end":31622,"line_start":758,"line_end":758,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":31951,"byte_end":31957,"line_start":768,"line_end":768,"column_start":12,"column_end":18},"name":"preset","qualname":"<MtStreamBuilder>::preset","value":"pub fn preset(&mut Self, u32) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Compression preset (level and possible flags)","sig":null,"attributes":[{"value":"/ Compression preset (level and possible flags)","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":31745,"byte_end":31794,"line_start":764,"line_end":764,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":31799,"byte_end":31802,"line_start":765,"line_end":765,"column_start":5,"column_end":8}},{"value":"/ The preset is set just like with `Stream::new_easy_encoder`. The preset","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":31807,"byte_end":31882,"line_start":766,"line_end":766,"column_start":5,"column_end":80}},{"value":"/ is ignored if filters below have been specified.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":31887,"byte_end":31939,"line_start":767,"line_end":767,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":32102,"byte_end":32109,"line_start":774,"line_end":774,"column_start":12,"column_end":19},"name":"filters","qualname":"<MtStreamBuilder>::filters","value":"pub fn filters(&mut Self, Filters) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Configure a custom filter chain\n","sig":null,"attributes":[{"value":"/ Configure a custom filter chain","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":32055,"byte_end":32090,"line_start":773,"line_end":773,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":32318,"byte_end":32323,"line_start":781,"line_end":781,"column_start":12,"column_end":17},"name":"check","qualname":"<MtStreamBuilder>::check","value":"pub fn check(&mut Self, Check) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Configures the integrity check type\n","sig":null,"attributes":[{"value":"/ Configures the integrity check type","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":32267,"byte_end":32306,"line_start":780,"line_end":780,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":32523,"byte_end":32531,"line_start":787,"line_end":787,"column_start":12,"column_end":20},"name":"memusage","qualname":"<MtStreamBuilder>::memusage","value":"pub fn memusage(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Calculate approximate memory usage of multithreaded .xz encoder\n","sig":null,"attributes":[{"value":"/ Calculate approximate memory usage of multithreaded .xz encoder","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":32444,"byte_end":32511,"line_start":786,"line_end":786,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":32691,"byte_end":32698,"line_start":792,"line_end":792,"column_start":12,"column_end":19},"name":"encoder","qualname":"<MtStreamBuilder>::encoder","value":"pub fn encoder(&Self) -> Result<Stream, Error>","parent":null,"children":[],"decl_id":null,"docs":" Initialize multithreaded .xz stream encoder.\n","sig":null,"attributes":[{"value":"/ Initialize multithreaded .xz stream encoder.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":32631,"byte_end":32679,"line_start":791,"line_end":791,"column_start":5,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":87},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bufread","qualname":"::bufread","value":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","parent":null,"children":[{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":100},{"krate":0,"index":104},{"krate":0,"index":108},{"krate":0,"index":115},{"krate":0,"index":118},{"krate":0,"index":122},{"krate":0,"index":127},{"krate":0,"index":134},{"krate":0,"index":137}],"decl_id":null,"docs":" I/O streams for wrapping `BufRead` types as encoders/decoders\n","sig":null,"attributes":[{"value":"/ I/O streams for wrapping `BufRead` types as encoders/decoders","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":34307,"byte_end":34372,"line_start":1,"line_end":1,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":96},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":34785,"byte_end":34794,"line_start":18,"line_end":18,"column_start":12,"column_end":21},"name":"XzEncoder","qualname":"::bufread::XzEncoder","value":"XzEncoder {  }","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":99}],"decl_id":null,"docs":" An xz encoder, or compressor.","sig":null,"attributes":[{"value":"/ An xz encoder, or compressor.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":34584,"byte_end":34617,"line_start":14,"line_end":14,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":34618,"byte_end":34621,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This structure implements a `BufRead` interface and will read uncompressed","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":34622,"byte_end":34700,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/ data from an underlying stream and emit a stream of compressed data.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":34701,"byte_end":34773,"line_start":17,"line_end":17,"column_start":1,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":100},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":35035,"byte_end":35044,"line_start":27,"line_end":27,"column_start":12,"column_end":21},"name":"XzDecoder","qualname":"::bufread::XzDecoder","value":"XzDecoder {  }","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":103}],"decl_id":null,"docs":" A xz decoder, or decompressor.","sig":null,"attributes":[{"value":"/ A xz decoder, or decompressor.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":34833,"byte_end":34867,"line_start":23,"line_end":23,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":34868,"byte_end":34871,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This structure implements a `BufRead` interface and takes a stream of","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":34872,"byte_end":34945,"line_start":25,"line_end":25,"column_start":1,"column_end":74}},{"value":"/ compressed data as input, providing the decompressed data when read from.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":34946,"byte_end":35023,"line_start":26,"line_end":26,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":35340,"byte_end":35343,"line_start":37,"line_end":37,"column_start":12,"column_end":15},"name":"new","qualname":"<XzEncoder<R>>::new","value":"pub fn new(R, u32) -> XzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.","sig":null,"attributes":[{"value":"/ Creates a new encoder which will read uncompressed data from the given","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":35119,"byte_end":35193,"line_start":33,"line_end":33,"column_start":5,"column_end":79}},{"value":"/ stream and emit the compressed stream.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":35198,"byte_end":35240,"line_start":34,"line_end":34,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":35245,"byte_end":35248,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ The `level` argument here is typically 0-9 with 6 being a good default.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":35253,"byte_end":35328,"line_start":36,"line_end":36,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":35700,"byte_end":35710,"line_start":46,"line_end":46,"column_start":12,"column_end":22},"name":"new_stream","qualname":"<XzEncoder<R>>::new_stream","value":"pub fn new_stream(R, Stream) -> XzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder with a custom `Stream`.","sig":null,"attributes":[{"value":"/ Creates a new encoder with a custom `Stream`.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":35509,"byte_end":35558,"line_start":42,"line_end":42,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":35563,"byte_end":35566,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ The `Stream` can be pre-configured for multithreaded encoding, different","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":35571,"byte_end":35647,"line_start":44,"line_end":44,"column_start":5,"column_end":81}},{"value":"/ compression options/tuning, etc.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":35652,"byte_end":35688,"line_start":45,"line_end":45,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":35924,"byte_end":35931,"line_start":56,"line_end":56,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<XzEncoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying stream","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":35863,"byte_end":35912,"line_start":55,"line_end":55,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":36176,"byte_end":36183,"line_start":64,"line_end":64,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<XzEncoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":35976,"byte_end":36033,"line_start":60,"line_end":60,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":36038,"byte_end":36041,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":36046,"byte_end":36118,"line_start":62,"line_end":62,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":36123,"byte_end":36164,"line_start":63,"line_end":63,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":36311,"byte_end":36321,"line_start":69,"line_end":69,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<XzEncoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this encoder, returning the underlying reader.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":36240,"byte_end":36299,"line_start":68,"line_end":68,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":36895,"byte_end":36904,"line_start":82,"line_end":82,"column_start":12,"column_end":21},"name":"total_out","qualname":"<XzEncoder<R>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes produced by the compressor\n (e.g. the number of bytes read from this stream)","sig":null,"attributes":[{"value":"/ Returns the number of bytes produced by the compressor","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":36363,"byte_end":36421,"line_start":73,"line_end":73,"column_start":5,"column_end":63}},{"value":"/ (e.g. the number of bytes read from this stream)","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":36426,"byte_end":36478,"line_start":74,"line_end":74,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":36483,"byte_end":36486,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ Note that, due to buffering, this only bears any relation to","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":36491,"byte_end":36555,"line_start":76,"line_end":76,"column_start":5,"column_end":69}},{"value":"/ total_in() when the compressor chooses to flush its data","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":36560,"byte_end":36620,"line_start":77,"line_end":77,"column_start":5,"column_end":65}},{"value":"/ (unfortunately, this won't happen this won't happen in general","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":36625,"byte_end":36691,"line_start":78,"line_end":78,"column_start":5,"column_end":71}},{"value":"/ at the end of the stream, because the compressor doesn't know","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":36696,"byte_end":36761,"line_start":79,"line_end":79,"column_start":5,"column_end":70}},{"value":"/ if there's more data to come).  At that point,","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":36766,"byte_end":36816,"line_start":80,"line_end":80,"column_start":5,"column_end":55}},{"value":"/ `total_out() / total_in()` would be the compression ratio.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":36821,"byte_end":36883,"line_start":81,"line_end":81,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":37099,"byte_end":37107,"line_start":88,"line_end":88,"column_start":12,"column_end":20},"name":"total_in","qualname":"<XzEncoder<R>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes consumed by the compressor\n (e.g. the number of bytes read from the underlying stream)\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes consumed by the compressor","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":36962,"byte_end":37020,"line_start":86,"line_end":86,"column_start":5,"column_end":63}},{"value":"/ (e.g. the number of bytes read from the underlying stream)","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":37025,"byte_end":37087,"line_start":87,"line_end":87,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":38889,"byte_end":38892,"line_start":146,"line_end":146,"column_start":12,"column_end":15},"name":"new","qualname":"<XzDecoder<R>>::new","value":"pub fn new(R) -> XzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder which will decompress data read from the given","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":38789,"byte_end":38861,"line_start":144,"line_end":144,"column_start":5,"column_end":77}},{"value":"/ stream.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":38866,"byte_end":38877,"line_start":145,"line_end":145,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":39208,"byte_end":39225,"line_start":153,"line_end":153,"column_start":12,"column_end":29},"name":"new_multi_decoder","qualname":"<XzDecoder<R>>::new_multi_decoder","value":"pub fn new_multi_decoder(R) -> XzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n input. All the concatenated xz streams from input will be consumed.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder which will decompress data read from the given","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":39048,"byte_end":39120,"line_start":151,"line_end":151,"column_start":5,"column_end":77}},{"value":"/ input. All the concatenated xz streams from input will be consumed.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":39125,"byte_end":39196,"line_start":152,"line_end":152,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":39590,"byte_end":39600,"line_start":162,"line_end":162,"column_start":12,"column_end":22},"name":"new_stream","qualname":"<XzDecoder<R>>::new_stream","value":"pub fn new_stream(R, Stream) -> XzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder with a custom `Stream`.","sig":null,"attributes":[{"value":"/ Creates a new decoder with a custom `Stream`.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":39405,"byte_end":39454,"line_start":158,"line_end":158,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":39459,"byte_end":39462,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ The `Stream` can be pre-configured for various checks, different","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":39467,"byte_end":39535,"line_start":160,"line_end":160,"column_start":5,"column_end":73}},{"value":"/ decompression options/tuning, etc.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":39540,"byte_end":39578,"line_start":161,"line_end":161,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":39781,"byte_end":39788,"line_start":169,"line_end":169,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<XzDecoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying stream","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":39720,"byte_end":39769,"line_start":168,"line_end":168,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":40033,"byte_end":40040,"line_start":177,"line_end":177,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<XzDecoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":39833,"byte_end":39890,"line_start":173,"line_end":173,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":39895,"byte_end":39898,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":39903,"byte_end":39975,"line_start":175,"line_end":175,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":39980,"byte_end":40021,"line_start":176,"line_end":176,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":40168,"byte_end":40178,"line_start":182,"line_end":182,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<XzDecoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":40097,"byte_end":40156,"line_start":181,"line_end":181,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":40447,"byte_end":40455,"line_start":190,"line_end":190,"column_start":12,"column_end":20},"name":"total_in","qualname":"<XzDecoder<R>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has consumed.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":40220,"byte_end":40287,"line_start":186,"line_end":186,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":40292,"byte_end":40295,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ Note that this will likely be smaller than what the decompressor","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":40300,"byte_end":40368,"line_start":188,"line_end":188,"column_start":5,"column_end":73}},{"value":"/ actually read from the underlying stream due to buffering.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":40373,"byte_end":40435,"line_start":189,"line_end":189,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":40591,"byte_end":40600,"line_start":195,"line_end":195,"column_start":12,"column_end":21},"name":"total_out","qualname":"<XzDecoder<R>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has produced.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":40512,"byte_end":40579,"line_start":194,"line_end":194,"column_start":5,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":141},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"read","qualname":"::read","value":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":151},{"krate":0,"index":154},{"krate":0,"index":163},{"krate":0,"index":166},{"krate":0,"index":170},{"krate":0,"index":180},{"krate":0,"index":183}],"decl_id":null,"docs":" Reader-based compression/decompression streams\n","sig":null,"attributes":[{"value":"/ Reader-based compression/decompression streams","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":43917,"byte_end":43967,"line_start":1,"line_end":1,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":148},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":44302,"byte_end":44311,"line_start":16,"line_end":16,"column_start":12,"column_end":21},"name":"XzEncoder","qualname":"::read::XzEncoder","value":"XzEncoder {  }","parent":null,"children":[{"krate":0,"index":150}],"decl_id":null,"docs":" A compression stream which wraps an uncompressed stream of data. Compressed\n data will be read from the stream.\n","sig":null,"attributes":[{"value":"/ A compression stream which wraps an uncompressed stream of data. Compressed","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":44172,"byte_end":44251,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"/ data will be read from the stream.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":44252,"byte_end":44290,"line_start":15,"line_end":15,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":151},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":44502,"byte_end":44511,"line_start":22,"line_end":22,"column_start":12,"column_end":21},"name":"XzDecoder","qualname":"::read::XzDecoder","value":"XzDecoder {  }","parent":null,"children":[{"krate":0,"index":153}],"decl_id":null,"docs":" A decompression stream which wraps a compressed stream of data. Decompressed\n data will be read from the stream.\n","sig":null,"attributes":[{"value":"/ A decompression stream which wraps a compressed stream of data. Decompressed","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":44371,"byte_end":44451,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ data will be read from the stream.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":44452,"byte_end":44490,"line_start":21,"line_end":21,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":44837,"byte_end":44840,"line_start":31,"line_end":31,"column_start":12,"column_end":15},"name":"new","qualname":"<XzEncoder<R>>::new","value":"pub fn new(R, u32) -> XzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new compression stream which will compress at the given level\n to read compress output to the give output stream.","sig":null,"attributes":[{"value":"/ Create a new compression stream which will compress at the given level","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":44604,"byte_end":44678,"line_start":27,"line_end":27,"column_start":5,"column_end":79}},{"value":"/ to read compress output to the give output stream.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":44683,"byte_end":44737,"line_start":28,"line_end":28,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":44742,"byte_end":44745,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ The `level` argument here is typically 0-9 with 6 being a good default.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":44750,"byte_end":44825,"line_start":30,"line_end":30,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":45179,"byte_end":45189,"line_start":41,"line_end":41,"column_start":12,"column_end":22},"name":"new_stream","qualname":"<XzEncoder<R>>::new_stream","value":"pub fn new_stream(R, Stream) -> XzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder with a custom `Stream`.","sig":null,"attributes":[{"value":"/ Creates a new encoder with a custom `Stream`.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":44988,"byte_end":45037,"line_start":37,"line_end":37,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":45042,"byte_end":45045,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ The `Stream` can be pre-configured for multithreaded encoding, different","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":45050,"byte_end":45126,"line_start":39,"line_end":39,"column_start":5,"column_end":81}},{"value":"/ compression options/tuning, etc.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":45131,"byte_end":45167,"line_start":40,"line_end":40,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":45410,"byte_end":45417,"line_start":48,"line_end":48,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<XzEncoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying stream","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":45349,"byte_end":45398,"line_start":47,"line_end":47,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":45683,"byte_end":45690,"line_start":56,"line_end":56,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<XzEncoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":45483,"byte_end":45540,"line_start":52,"line_end":52,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":45545,"byte_end":45548,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":45553,"byte_end":45625,"line_start":54,"line_end":54,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":45630,"byte_end":45671,"line_start":55,"line_end":55,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":45843,"byte_end":45853,"line_start":61,"line_end":61,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<XzEncoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the underlying writer, finishing the compression stream.\n","sig":null,"attributes":[{"value":"/ Unwrap the underlying writer, finishing the compression stream.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":45764,"byte_end":45831,"line_start":60,"line_end":60,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":46455,"byte_end":46464,"line_start":74,"line_end":74,"column_start":12,"column_end":21},"name":"total_out","qualname":"<XzEncoder<R>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes produced by the compressor\n (e.g. the number of bytes read from this stream)","sig":null,"attributes":[{"value":"/ Returns the number of bytes produced by the compressor","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":45923,"byte_end":45981,"line_start":65,"line_end":65,"column_start":5,"column_end":63}},{"value":"/ (e.g. the number of bytes read from this stream)","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":45986,"byte_end":46038,"line_start":66,"line_end":66,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":46043,"byte_end":46046,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ Note that, due to buffering, this only bears any relation to","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":46051,"byte_end":46115,"line_start":68,"line_end":68,"column_start":5,"column_end":69}},{"value":"/ total_in() when the compressor chooses to flush its data","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":46120,"byte_end":46180,"line_start":69,"line_end":69,"column_start":5,"column_end":65}},{"value":"/ (unfortunately, this won't happen this won't happen in general","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":46185,"byte_end":46251,"line_start":70,"line_end":70,"column_start":5,"column_end":71}},{"value":"/ at the end of the stream, because the compressor doesn't know","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":46256,"byte_end":46321,"line_start":71,"line_end":71,"column_start":5,"column_end":70}},{"value":"/ if there's more data to come).  At that point,","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":46326,"byte_end":46376,"line_start":72,"line_end":72,"column_start":5,"column_end":55}},{"value":"/ `total_out() / total_in()` would be the compression ratio.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":46381,"byte_end":46443,"line_start":73,"line_end":73,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":46660,"byte_end":46668,"line_start":80,"line_end":80,"column_start":12,"column_end":20},"name":"total_in","qualname":"<XzEncoder<R>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes consumed by the compressor\n (e.g. the number of bytes read from the underlying stream)\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes consumed by the compressor","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":46523,"byte_end":46581,"line_start":78,"line_end":78,"column_start":5,"column_end":63}},{"value":"/ (e.g. the number of bytes read from the underlying stream)","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":46586,"byte_end":46648,"line_start":79,"line_end":79,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":47684,"byte_end":47687,"line_start":117,"line_end":117,"column_start":12,"column_end":15},"name":"new","qualname":"<XzDecoder<R>>::new","value":"pub fn new(R) -> XzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decompression stream, which will read compressed\n data from the given input stream, and decompress one xz stream.\n It may also consume input data that follows the xz stream.\n Use [`xz::bufread::XzDecoder`] instead to process a mix of xz and non-xz data.\n","sig":null,"attributes":[{"value":"/ Create a new decompression stream, which will read compressed","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":47381,"byte_end":47446,"line_start":113,"line_end":113,"column_start":5,"column_end":70}},{"value":"/ data from the given input stream, and decompress one xz stream.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":47451,"byte_end":47518,"line_start":114,"line_end":114,"column_start":5,"column_end":72}},{"value":"/ It may also consume input data that follows the xz stream.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":47523,"byte_end":47585,"line_start":115,"line_end":115,"column_start":5,"column_end":67}},{"value":"/ Use [`xz::bufread::XzDecoder`] instead to process a mix of xz and non-xz data.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":47590,"byte_end":47672,"line_start":116,"line_end":116,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":47973,"byte_end":47990,"line_start":125,"line_end":125,"column_start":12,"column_end":29},"name":"new_multi_decoder","qualname":"<XzDecoder<R>>::new_multi_decoder","value":"pub fn new_multi_decoder(R) -> XzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decompression stream, which will read compressed\n data from the given input and decompress all the xz stream it contains.\n","sig":null,"attributes":[{"value":"/ Create a new decompression stream, which will read compressed","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":47816,"byte_end":47881,"line_start":123,"line_end":123,"column_start":5,"column_end":70}},{"value":"/ data from the given input and decompress all the xz stream it contains.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":47886,"byte_end":47961,"line_start":124,"line_end":124,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":48318,"byte_end":48328,"line_start":135,"line_end":135,"column_start":12,"column_end":22},"name":"new_stream","qualname":"<XzDecoder<R>>::new_stream","value":"pub fn new_stream(R, Stream) -> XzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder with a custom `Stream`.","sig":null,"attributes":[{"value":"/ Creates a new decoder with a custom `Stream`.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":48133,"byte_end":48182,"line_start":131,"line_end":131,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":48187,"byte_end":48190,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ The `Stream` can be pre-configured for various checks, different","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":48195,"byte_end":48263,"line_start":133,"line_end":133,"column_start":5,"column_end":73}},{"value":"/ decompression options/tuning, etc.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":48268,"byte_end":48306,"line_start":134,"line_end":134,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":48549,"byte_end":48556,"line_start":142,"line_end":142,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<XzDecoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying stream","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":48488,"byte_end":48537,"line_start":141,"line_end":141,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":48822,"byte_end":48829,"line_start":150,"line_end":150,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<XzDecoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":48622,"byte_end":48679,"line_start":146,"line_end":146,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":48684,"byte_end":48687,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":48692,"byte_end":48764,"line_start":148,"line_end":148,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":48769,"byte_end":48810,"line_start":149,"line_end":149,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":48982,"byte_end":48992,"line_start":155,"line_end":155,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<XzDecoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the underlying writer, finishing the compression stream.\n","sig":null,"attributes":[{"value":"/ Unwrap the underlying writer, finishing the compression stream.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":48903,"byte_end":48970,"line_start":154,"line_end":154,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":49471,"byte_end":49480,"line_start":166,"line_end":166,"column_start":12,"column_end":21},"name":"total_out","qualname":"<XzDecoder<R>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes produced by the decompressor\n (e.g. the number of bytes read from this stream)","sig":null,"attributes":[{"value":"/ Returns the number of bytes produced by the decompressor","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":49062,"byte_end":49122,"line_start":159,"line_end":159,"column_start":5,"column_end":65}},{"value":"/ (e.g. the number of bytes read from this stream)","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":49127,"byte_end":49179,"line_start":160,"line_end":160,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":49184,"byte_end":49187,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ Note that, due to buffering, this only bears any relation to","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":49192,"byte_end":49256,"line_start":162,"line_end":162,"column_start":5,"column_end":69}},{"value":"/ total_in() when the decompressor reaches a sync point","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":49261,"byte_end":49318,"line_start":163,"line_end":163,"column_start":5,"column_end":62}},{"value":"/ (e.g. where the original compressed stream was flushed).","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":49323,"byte_end":49383,"line_start":164,"line_end":164,"column_start":5,"column_end":65}},{"value":"/ At that point, `total_in() / total_out()` is the compression ratio.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":49388,"byte_end":49459,"line_start":165,"line_end":165,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":49678,"byte_end":49686,"line_start":172,"line_end":172,"column_start":12,"column_end":20},"name":"total_in","qualname":"<XzDecoder<R>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes consumed by the decompressor\n (e.g. the number of bytes read from the underlying stream)\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes consumed by the decompressor","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":49539,"byte_end":49599,"line_start":170,"line_end":170,"column_start":5,"column_end":65}},{"value":"/ (e.g. the number of bytes read from the underlying stream)","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":49604,"byte_end":49666,"line_start":171,"line_end":171,"column_start":5,"column_end":67}}]},{"kind":"Mod","id":{"krate":0,"index":187},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"write","qualname":"::write","value":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":201},{"krate":0,"index":206},{"krate":0,"index":217},{"krate":0,"index":221},{"krate":0,"index":224},{"krate":0,"index":227},{"krate":0,"index":239},{"krate":0,"index":243},{"krate":0,"index":246}],"decl_id":null,"docs":" Writer-based compression/decompression streams\n","sig":null,"attributes":[{"value":"/ Writer-based compression/decompression streams","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":54624,"byte_end":54674,"line_start":1,"line_end":1,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":196},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":55026,"byte_end":55035,"line_start":16,"line_end":16,"column_start":12,"column_end":21},"name":"XzEncoder","qualname":"::write::XzEncoder","value":"XzEncoder {  }","parent":null,"children":[{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200}],"decl_id":null,"docs":" A compression stream which will have uncompressed data written to it and\n will write compressed data to an output stream.\n","sig":null,"attributes":[{"value":"/ A compression stream which will have uncompressed data written to it and","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":54886,"byte_end":54962,"line_start":14,"line_end":14,"column_start":1,"column_end":77}},{"value":"/ will write compressed data to an output stream.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":54963,"byte_end":55014,"line_start":15,"line_end":15,"column_start":1,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":201},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":55247,"byte_end":55256,"line_start":24,"line_end":24,"column_start":12,"column_end":21},"name":"XzDecoder","qualname":"::write::XzDecoder","value":"XzDecoder {  }","parent":null,"children":[{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205}],"decl_id":null,"docs":" A compression stream which will have compressed data written to it and\n will write uncompressed data to an output stream.\n","sig":null,"attributes":[{"value":"/ A compression stream which will have compressed data written to it and","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":55107,"byte_end":55181,"line_start":22,"line_end":22,"column_start":1,"column_end":75}},{"value":"/ will write uncompressed data to an output stream.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":55182,"byte_end":55235,"line_start":23,"line_end":23,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":55508,"byte_end":55511,"line_start":33,"line_end":33,"column_start":12,"column_end":15},"name":"new","qualname":"<XzEncoder<W>>::new","value":"pub fn new(W, u32) -> XzEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new compression stream which will compress at the given level\n to write compress output to the give output stream.\n","sig":null,"attributes":[{"value":"/ Create a new compression stream which will compress at the given level","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":55362,"byte_end":55436,"line_start":31,"line_end":31,"column_start":5,"column_end":79}},{"value":"/ to write compress output to the give output stream.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":55441,"byte_end":55496,"line_start":32,"line_end":32,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":55814,"byte_end":55824,"line_start":40,"line_end":40,"column_start":12,"column_end":22},"name":"new_stream","qualname":"<XzEncoder<W>>::new_stream","value":"pub fn new_stream(W, Stream) -> XzEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder which will use the specified `Stream` to encode\n (compress) data into the provided `obj`.\n","sig":null,"attributes":[{"value":"/ Create a new encoder which will use the specified `Stream` to encode","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":55681,"byte_end":55753,"line_start":38,"line_end":38,"column_start":5,"column_end":77}},{"value":"/ (compress) data into the provided `obj`.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":55758,"byte_end":55802,"line_start":39,"line_end":39,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":56072,"byte_end":56079,"line_start":49,"line_end":49,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<XzEncoder<W>>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":56010,"byte_end":56060,"line_start":48,"line_end":48,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":56362,"byte_end":56369,"line_start":57,"line_end":57,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<XzEncoder<W>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":56141,"byte_end":56199,"line_start":53,"line_end":53,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":56204,"byte_end":56207,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ Note that mutating the output/input state of the stream may corrupt this","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":56212,"byte_end":56288,"line_start":55,"line_end":55,"column_start":5,"column_end":81}},{"value":"/ object, so care must be taken when using this method.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":56293,"byte_end":56350,"line_start":56,"line_end":56,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":57090,"byte_end":57100,"line_start":79,"line_end":79,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<XzEncoder<W>>::try_finish","value":"pub fn try_finish(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[{"value":"/ Attempt to finish this output stream, writing out final chunks of data.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":56648,"byte_end":56723,"line_start":69,"line_end":69,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":56728,"byte_end":56731,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ Note that this function can only be used once data has finished being","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":56736,"byte_end":56809,"line_start":71,"line_end":71,"column_start":5,"column_end":78}},{"value":"/ written to the output stream. After this function is called then further","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":56814,"byte_end":56890,"line_start":72,"line_end":72,"column_start":5,"column_end":81}},{"value":"/ calls to `write` may result in a panic.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":56895,"byte_end":56938,"line_start":73,"line_end":73,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":56943,"byte_end":56946,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":56951,"byte_end":56963,"line_start":75,"line_end":75,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":56968,"byte_end":56971,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ Attempts to write data to this stream may result in a panic after this","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":56976,"byte_end":57050,"line_start":77,"line_end":77,"column_start":5,"column_end":79}},{"value":"/ function is called.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":57055,"byte_end":57078,"line_start":78,"line_end":78,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":57944,"byte_end":57950,"line_start":100,"line_end":100,"column_start":12,"column_end":18},"name":"finish","qualname":"<XzEncoder<W>>::finish","value":"pub fn finish(Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[{"value":"/ Consumes this encoder, flushing the output stream.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":57374,"byte_end":57428,"line_start":90,"line_end":90,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":57433,"byte_end":57436,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ This will flush the underlying data stream and then return the contained","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":57441,"byte_end":57517,"line_start":92,"line_end":92,"column_start":5,"column_end":81}},{"value":"/ writer if the flush succeeded.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":57522,"byte_end":57556,"line_start":93,"line_end":93,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":57561,"byte_end":57564,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ Note that this function may not be suitable to call in a situation where","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":57569,"byte_end":57645,"line_start":95,"line_end":95,"column_start":5,"column_end":81}},{"value":"/ the underlying stream is an asynchronous I/O stream. To finish a stream","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":57650,"byte_end":57725,"line_start":96,"line_end":96,"column_start":5,"column_end":80}},{"value":"/ the `try_finish` (or `shutdown`) method should be used instead. To","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":57730,"byte_end":57800,"line_start":97,"line_end":97,"column_start":5,"column_end":75}},{"value":"/ re-acquire ownership of a stream it is safe to call this method after","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":57805,"byte_end":57878,"line_start":98,"line_end":98,"column_start":5,"column_end":78}},{"value":"/ `try_finish` or `shutdown` has returned `Ok`.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":57883,"byte_end":57932,"line_start":99,"line_end":99,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":58328,"byte_end":58337,"line_start":110,"line_end":110,"column_start":12,"column_end":21},"name":"total_out","qualname":"<XzEncoder<W>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes produced by the compressor","sig":null,"attributes":[{"value":"/ Returns the number of bytes produced by the compressor","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":58056,"byte_end":58114,"line_start":105,"line_end":105,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":58119,"byte_end":58122,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ Note that, due to buffering, this only bears any relation to","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":58127,"byte_end":58191,"line_start":107,"line_end":107,"column_start":5,"column_end":69}},{"value":"/ `total_in()` after a call to `flush()`.  At that point,","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":58196,"byte_end":58255,"line_start":108,"line_end":108,"column_start":5,"column_end":64}},{"value":"/ `total_out() / total_in()` is the compression ratio.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":58260,"byte_end":58316,"line_start":109,"line_end":109,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":58524,"byte_end":58532,"line_start":116,"line_end":116,"column_start":12,"column_end":20},"name":"total_in","qualname":"<XzEncoder<W>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes consumed by the compressor\n (e.g. the number of bytes written to this stream.)\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes consumed by the compressor","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":58395,"byte_end":58453,"line_start":114,"line_end":114,"column_start":5,"column_end":63}},{"value":"/ (e.g. the number of bytes written to this stream.)","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":58458,"byte_end":58512,"line_start":115,"line_end":115,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":60180,"byte_end":60183,"line_start":179,"line_end":179,"column_start":12,"column_end":15},"name":"new","qualname":"<XzDecoder<W>>::new","value":"pub fn new(W) -> XzDecoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoding stream which will decode into `obj` one xz stream\n from the input written to it.\n","sig":null,"attributes":[{"value":"/ Creates a new decoding stream which will decode into `obj` one xz stream","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":60054,"byte_end":60130,"line_start":177,"line_end":177,"column_start":5,"column_end":81}},{"value":"/ from the input written to it.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":60135,"byte_end":60168,"line_start":178,"line_end":178,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":60474,"byte_end":60491,"line_start":186,"line_end":186,"column_start":12,"column_end":29},"name":"new_multi_decoder","qualname":"<XzDecoder<W>>::new_multi_decoder","value":"pub fn new_multi_decoder(W) -> XzDecoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoding stream which will decode into `obj` all the xz streams\n from the input written to it.\n","sig":null,"attributes":[{"value":"/ Creates a new decoding stream which will decode into `obj` all the xz streams","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":60343,"byte_end":60424,"line_start":184,"line_end":184,"column_start":5,"column_end":86}},{"value":"/ from the input written to it.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":60429,"byte_end":60462,"line_start":185,"line_end":185,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":60941,"byte_end":60951,"line_start":196,"line_end":196,"column_start":12,"column_end":22},"name":"new_stream","qualname":"<XzDecoder<W>>::new_stream","value":"pub fn new_stream(W, Stream) -> XzDecoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoding stream which will decode all input written to it\n into `obj`.","sig":null,"attributes":[{"value":"/ Creates a new decoding stream which will decode all input written to it","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":60677,"byte_end":60752,"line_start":191,"line_end":191,"column_start":5,"column_end":80}},{"value":"/ into `obj`.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":60757,"byte_end":60772,"line_start":192,"line_end":192,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":60777,"byte_end":60780,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ A custom `stream` can be specified to configure what format this decoder","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":60785,"byte_end":60861,"line_start":194,"line_end":194,"column_start":5,"column_end":81}},{"value":"/ will recognize or configure other various decoding options.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":60866,"byte_end":60929,"line_start":195,"line_end":195,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":61199,"byte_end":61206,"line_start":205,"line_end":205,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<XzDecoder<W>>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":61137,"byte_end":61187,"line_start":204,"line_end":204,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":61489,"byte_end":61496,"line_start":213,"line_end":213,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<XzDecoder<W>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":61268,"byte_end":61326,"line_start":209,"line_end":209,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":61331,"byte_end":61334,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ Note that mutating the output/input state of the stream may corrupt this","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":61339,"byte_end":61415,"line_start":211,"line_end":211,"column_start":5,"column_end":81}},{"value":"/ object, so care must be taken when using this method.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":61420,"byte_end":61477,"line_start":212,"line_end":212,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":62771,"byte_end":62777,"line_start":251,"line_end":251,"column_start":12,"column_end":18},"name":"finish","qualname":"<XzDecoder<W>>::finish","value":"pub fn finish(&mut Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the underlying writer, finishing the compression stream.\n","sig":null,"attributes":[{"value":"/ Unwrap the underlying writer, finishing the compression stream.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":62692,"byte_end":62759,"line_start":250,"line_end":250,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":63158,"byte_end":63167,"line_start":261,"line_end":261,"column_start":12,"column_end":21},"name":"total_out","qualname":"<XzDecoder<W>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes produced by the decompressor","sig":null,"attributes":[{"value":"/ Returns the number of bytes produced by the decompressor","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":62884,"byte_end":62944,"line_start":256,"line_end":256,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":62949,"byte_end":62952,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ Note that, due to buffering, this only bears any relation to","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":62957,"byte_end":63021,"line_start":258,"line_end":258,"column_start":5,"column_end":69}},{"value":"/ `total_in()` after a call to `flush()`.  At that point,","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":63026,"byte_end":63085,"line_start":259,"line_end":259,"column_start":5,"column_end":64}},{"value":"/ `total_in() / total_out()` is the compression ratio.","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":63090,"byte_end":63146,"line_start":260,"line_end":260,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":63356,"byte_end":63364,"line_start":267,"line_end":267,"column_start":12,"column_end":20},"name":"total_in","qualname":"<XzDecoder<W>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes consumed by the decompressor\n (e.g. the number of bytes written to this stream.)\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes consumed by the decompressor","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":63225,"byte_end":63285,"line_start":265,"line_end":265,"column_start":5,"column_end":65}},{"value":"/ (e.g. the number of bytes written to this stream.)","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":63290,"byte_end":63344,"line_start":266,"line_end":266,"column_start":5,"column_end":59}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":2759,"byte_end":2765,"line_start":24,"line_end":24,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":2790,"byte_end":2796,"line_start":25,"line_end":25,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":12331,"byte_end":12337,"line_start":269,"line_end":269,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":18918,"byte_end":18929,"line_start":434,"line_end":434,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":24788,"byte_end":24793,"line_start":572,"line_end":572,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":25049,"byte_end":25060,"line_start":582,"line_end":582,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":56}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":25327,"byte_end":25334,"line_start":592,"line_end":592,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":28669,"byte_end":28684,"line_start":694,"line_end":694,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":33839,"byte_end":33844,"line_start":820,"line_end":820,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":33963,"byte_end":33968,"line_start":826,"line_end":826,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":34052,"byte_end":34057,"line_start":830,"line_end":830,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":34189,"byte_end":34195,"line_start":836,"line_end":836,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":35100,"byte_end":35109,"line_start":32,"line_end":32,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":106},{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":35844,"byte_end":35853,"line_start":54,"line_end":54,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":37188,"byte_end":37197,"line_start":93,"line_end":93,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":38383,"byte_end":38392,"line_start":126,"line_end":126,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":120},{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":38770,"byte_end":38779,"line_start":143,"line_end":143,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":39701,"byte_end":39710,"line_start":167,"line_end":167,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":40682,"byte_end":40691,"line_start":200,"line_end":200,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":41991,"byte_end":42000,"line_start":235,"line_end":235,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":139},{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":44585,"byte_end":44594,"line_start":26,"line_end":26,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":46747,"byte_end":46756,"line_start":85,"line_end":85,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":46971,"byte_end":46980,"line_start":95,"line_end":95,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":47362,"byte_end":47371,"line_start":112,"line_end":112,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":49765,"byte_end":49774,"line_start":177,"line_end":177,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":49996,"byte_end":50005,"line_start":187,"line_end":187,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":185},{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":55343,"byte_end":55352,"line_start":30,"line_end":30,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":58612,"byte_end":58621,"line_start":121,"line_end":121,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":219},{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":59657,"byte_end":59666,"line_start":158,"line_end":158,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":59890,"byte_end":59899,"line_start":168,"line_end":168,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":60035,"byte_end":60044,"line_start":176,"line_end":176,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":63444,"byte_end":63453,"line_start":272,"line_end":272,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":241},{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":64294,"byte_end":64303,"line_start":302,"line_end":302,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":64527,"byte_end":64536,"line_start":312,"line_end":312,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":2024,"byte_end":2030,"line_start":61,"line_end":61,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":2041,"byte_end":2048,"line_start":63,"line_end":63,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":87}},{"kind":"Mod","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":2058,"byte_end":2062,"line_start":64,"line_end":64,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":141}},{"kind":"Mod","span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/lib.rs","byte_start":2072,"byte_end":2077,"line_start":65,"line_end":65,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":187}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":2759,"byte_end":2765,"line_start":24,"line_end":24,"column_start":22,"column_end":28},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":12},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":2790,"byte_end":2796,"line_start":25,"line_end":25,"column_start":22,"column_end":28},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":12},"to":{"krate":2,"index":2057}},{"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":12331,"byte_end":12337,"line_start":269,"line_end":269,"column_start":6,"column_end":12},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":12},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":18918,"byte_end":18929,"line_start":434,"line_end":434,"column_start":6,"column_end":17},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":16},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":24788,"byte_end":24793,"line_start":572,"line_end":572,"column_start":6,"column_end":11},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":309},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":25049,"byte_end":25060,"line_start":582,"line_end":582,"column_start":6,"column_end":17},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":335},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":25327,"byte_end":25334,"line_start":592,"line_end":592,"column_start":6,"column_end":13},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":21},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":28669,"byte_end":28684,"line_start":694,"line_end":694,"column_start":6,"column_end":21},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":18},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":33839,"byte_end":33844,"line_start":820,"line_end":820,"column_start":26,"column_end":31},"kind":{"Impl":{"id":8}},"from":{"krate":1,"index":2704},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":33963,"byte_end":33968,"line_start":826,"line_end":826,"column_start":23,"column_end":28},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":285},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":34052,"byte_end":34057,"line_start":830,"line_end":830,"column_start":23,"column_end":28},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":285},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/stream.rs","byte_start":34189,"byte_end":34195,"line_start":836,"line_end":836,"column_start":15,"column_end":21},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":12},"to":{"krate":2,"index":2266}},{"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":35100,"byte_end":35109,"line_start":32,"line_end":32,"column_start":18,"column_end":27},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":96},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":35844,"byte_end":35853,"line_start":54,"line_end":54,"column_start":9,"column_end":18},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":96},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":37188,"byte_end":37197,"line_start":93,"line_end":93,"column_start":27,"column_end":36},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":96},"to":{"krate":1,"index":3120}},{"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":38383,"byte_end":38392,"line_start":126,"line_end":126,"column_start":26,"column_end":35},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":96},"to":{"krate":1,"index":3179}},{"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":38770,"byte_end":38779,"line_start":143,"line_end":143,"column_start":18,"column_end":27},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":100},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":39701,"byte_end":39710,"line_start":167,"line_end":167,"column_start":9,"column_end":18},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":100},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":40682,"byte_end":40691,"line_start":200,"line_end":200,"column_start":27,"column_end":36},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":100},"to":{"krate":1,"index":3120}},{"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/bufread.rs","byte_start":41991,"byte_end":42000,"line_start":235,"line_end":235,"column_start":26,"column_end":35},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":100},"to":{"krate":1,"index":3179}},{"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":44585,"byte_end":44594,"line_start":26,"line_end":26,"column_start":15,"column_end":24},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":148},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":46747,"byte_end":46756,"line_start":85,"line_end":85,"column_start":24,"column_end":33},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":148},"to":{"krate":1,"index":3120}},{"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":46971,"byte_end":46980,"line_start":95,"line_end":95,"column_start":33,"column_end":42},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":148},"to":{"krate":1,"index":3179}},{"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":47362,"byte_end":47371,"line_start":112,"line_end":112,"column_start":15,"column_end":24},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":151},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":49765,"byte_end":49774,"line_start":177,"line_end":177,"column_start":24,"column_end":33},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":151},"to":{"krate":1,"index":3120}},{"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/read.rs","byte_start":49996,"byte_end":50005,"line_start":187,"line_end":187,"column_start":33,"column_end":42},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":151},"to":{"krate":1,"index":3179}},{"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":55343,"byte_end":55352,"line_start":30,"line_end":30,"column_start":16,"column_end":25},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":196},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":58612,"byte_end":58621,"line_start":121,"line_end":121,"column_start":26,"column_end":35},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":196},"to":{"krate":1,"index":3179}},{"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":59657,"byte_end":59666,"line_start":158,"line_end":158,"column_start":32,"column_end":41},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":196},"to":{"krate":1,"index":3120}},{"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":59890,"byte_end":59899,"line_start":168,"line_end":168,"column_start":25,"column_end":34},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":196},"to":{"krate":2,"index":2266}},{"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":60035,"byte_end":60044,"line_start":176,"line_end":176,"column_start":16,"column_end":25},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":201},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":63444,"byte_end":63453,"line_start":272,"line_end":272,"column_start":26,"column_end":35},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":201},"to":{"krate":1,"index":3179}},{"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":64294,"byte_end":64303,"line_start":302,"line_end":302,"column_start":32,"column_end":41},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":201},"to":{"krate":1,"index":3120}},{"span":{"file_name":"/home/emre/.cargo/registry/src/github.com-1ecc6299db9ec823/xz2-0.1.6/src/write.rs","byte_start":64527,"byte_end":64536,"line_start":312,"line_end":312,"column_start":25,"column_end":34},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":201},"to":{"krate":2,"index":2266}}]}